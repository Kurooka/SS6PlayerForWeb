// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum SsPartType{
  Invalid= -1,
  Nulltype= 0,
  Normal= 1,
  Text= 2,
  Instance= 3,
  Armature= 4,
  Effect= 5,
  Mesh= 6,
  Movenode= 7,
  Constraint= 8,
  Mask= 9,
  Joint= 10,
  Bonepoint= 11
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum PART_FLAG{
  INVISIBLE= 1,
  FLIP_H= 2,
  FLIP_V= 4,
  CELL_INDEX= 8,
  POSITION_X= 16,
  POSITION_Y= 32,
  POSITION_Z= 64,
  PIVOT_X= 128,
  PIVOT_Y= 256,
  ROTATIONX= 512,
  ROTATIONY= 1024,
  ROTATIONZ= 2048,
  SCALE_X= 4096,
  SCALE_Y= 8192,
  LOCALSCALE_X= 16384,
  LOCALSCALE_Y= 32768,
  OPACITY= 65536,
  LOCALOPACITY= 131072,
  PARTS_COLOR= 262144,
  VERTEX_TRANSFORM= 524288,
  SIZE_X= 1048576,
  SIZE_Y= 2097152,
  U_MOVE= 4194304,
  V_MOVE= 8388608,
  UV_ROTATION= 16777216,
  U_SCALE= 33554432,
  V_SCALE= 67108864,
  BOUNDINGRADIUS= 134217728,
  MASK= 268435456,
  PRIORITY= 536870912,
  INSTANCE_KEYFRAME= 1073741824,
  EFFECT_KEYFRAME= 2147483648
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum PART_FLAG2{
  MESHDATA= 1
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum VERTEX_FLAG{
  LT= 1,
  RT= 2,
  LB= 4,
  RB= 8,
  ONE= 16
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum EffectNodeBehavior{
  NONE= 0,
  EffectParticleElementBasic= 1,
  EffectParticleElementRndSeedChange= 2,
  EffectParticleElementDelay= 3,
  EffectParticleElementGravity= 4,
  EffectParticleElementPosition= 5,
  EffectParticleElementRotation= 6,
  EffectParticleElementRotationTrans= 7,
  EffectParticleElementTransSpeed= 8,
  EffectParticleElementTangentialAcceleration= 9,
  EffectParticleElementInitColor= 10,
  EffectParticleElementTransColor= 11,
  EffectParticleElementAlphaFade= 12,
  EffectParticleElementSize= 13,
  EffectParticleElementTransSize= 14,
  EffectParticlePointGravity= 15,
  EffectParticleTurnToDirectionEnabled= 16,
  EffectParticleInfiniteEmitEnabled= 17
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum userDataValue{
  NONE= 0,
  userDataInteger= 1,
  userDataRect= 2,
  userDataPoint= 3,
  userDataString= 4
}};

/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleInfiniteEmitEnabled {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleInfiniteEmitEnabled
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleInfiniteEmitEnabled {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
flag():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number flag
 * @returns flatbuffers.Offset
 */
static createEffectParticleInfiniteEmitEnabled(builder:flatbuffers.Builder, flag: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(flag);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleTurnToDirectionEnabled {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleTurnToDirectionEnabled
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleTurnToDirectionEnabled {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
Rotation():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Rotation
 * @returns flatbuffers.Offset
 */
static createEffectParticleTurnToDirectionEnabled(builder:flatbuffers.Builder, Rotation: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeFloat32(Rotation);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticlePointGravity {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticlePointGravity
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticlePointGravity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
PositionX():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
PositionY():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
Power():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Position_x
 * @param number Position_y
 * @param number Power
 * @returns flatbuffers.Offset
 */
static createEffectParticlePointGravity(builder:flatbuffers.Builder, Position_x: number, Position_y: number, Power: number):flatbuffers.Offset {
  builder.prep(4, 12);
  builder.writeFloat32(Power);
  builder.writeFloat32(Position_y);
  builder.writeFloat32(Position_x);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementTransSize {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementTransSize
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementTransSize {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
SizeXMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
SizeXMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
SizeYMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @returns number
 */
SizeYMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
};

/**
 * @returns number
 */
ScaleFactorMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 16);
};

/**
 * @returns number
 */
ScaleFactorMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 20);
};

/**
 * @param flatbuffers.Builder builder
 * @param number SizeXMinValue
 * @param number SizeXMaxValue
 * @param number SizeYMinValue
 * @param number SizeYMaxValue
 * @param number ScaleFactorMinValue
 * @param number ScaleFactorMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementTransSize(builder:flatbuffers.Builder, SizeXMinValue: number, SizeXMaxValue: number, SizeYMinValue: number, SizeYMaxValue: number, ScaleFactorMinValue: number, ScaleFactorMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.writeFloat32(ScaleFactorMaxValue);
  builder.writeFloat32(ScaleFactorMinValue);
  builder.writeFloat32(SizeYMaxValue);
  builder.writeFloat32(SizeYMinValue);
  builder.writeFloat32(SizeXMaxValue);
  builder.writeFloat32(SizeXMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementSize {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementSize
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementSize {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
SizeXMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
SizeXMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
SizeYMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @returns number
 */
SizeYMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
};

/**
 * @returns number
 */
ScaleFactorMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 16);
};

/**
 * @returns number
 */
ScaleFactorMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 20);
};

/**
 * @param flatbuffers.Builder builder
 * @param number SizeXMinValue
 * @param number SizeXMaxValue
 * @param number SizeYMinValue
 * @param number SizeYMaxValue
 * @param number ScaleFactorMinValue
 * @param number ScaleFactorMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementSize(builder:flatbuffers.Builder, SizeXMinValue: number, SizeXMaxValue: number, SizeYMinValue: number, SizeYMaxValue: number, ScaleFactorMinValue: number, ScaleFactorMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.writeFloat32(ScaleFactorMaxValue);
  builder.writeFloat32(ScaleFactorMinValue);
  builder.writeFloat32(SizeYMaxValue);
  builder.writeFloat32(SizeYMinValue);
  builder.writeFloat32(SizeXMaxValue);
  builder.writeFloat32(SizeXMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementAlphaFade {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementAlphaFade
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementAlphaFade {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
disprangeMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
disprangeMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number disprangeMinValue
 * @param number disprangeMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementAlphaFade(builder:flatbuffers.Builder, disprangeMinValue: number, disprangeMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeFloat32(disprangeMaxValue);
  builder.writeFloat32(disprangeMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementTransColor {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementTransColor
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementTransColor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
ColorMinValue():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
ColorMaxValue():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number ColorMinValue
 * @param number ColorMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementTransColor(builder:flatbuffers.Builder, ColorMinValue: number, ColorMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(ColorMaxValue);
  builder.writeInt32(ColorMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementInitColor {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementInitColor
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementInitColor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
ColorMinValue():number {
  return this.bb!.readUint32(this.bb_pos);
};

/**
 * @returns number
 */
ColorMaxValue():number {
  return this.bb!.readUint32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number ColorMinValue
 * @param number ColorMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementInitColor(builder:flatbuffers.Builder, ColorMinValue: number, ColorMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(ColorMaxValue);
  builder.writeInt32(ColorMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementTangentialAcceleration {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementTangentialAcceleration
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementTangentialAcceleration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
AccelerationMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
AccelerationMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number AccelerationMinValue
 * @param number AccelerationMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementTangentialAcceleration(builder:flatbuffers.Builder, AccelerationMinValue: number, AccelerationMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeFloat32(AccelerationMaxValue);
  builder.writeFloat32(AccelerationMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementTransSpeed {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementTransSpeed
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementTransSpeed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
SpeedMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
SpeedMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number SpeedMinValue
 * @param number SpeedMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementTransSpeed(builder:flatbuffers.Builder, SpeedMinValue: number, SpeedMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeFloat32(SpeedMaxValue);
  builder.writeFloat32(SpeedMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementRotationTrans {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementRotationTrans
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementRotationTrans {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
RotationFactor():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
EndLifeTimePer():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number RotationFactor
 * @param number EndLifeTimePer
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementRotationTrans(builder:flatbuffers.Builder, RotationFactor: number, EndLifeTimePer: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeFloat32(EndLifeTimePer);
  builder.writeFloat32(RotationFactor);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementRotation {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementRotation
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementRotation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
RotationMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
RotationMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
RotationAddMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @returns number
 */
RotationAddMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number RotationMinValue
 * @param number RotationMaxValue
 * @param number RotationAddMinValue
 * @param number RotationAddMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementRotation(builder:flatbuffers.Builder, RotationMinValue: number, RotationMaxValue: number, RotationAddMinValue: number, RotationAddMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeFloat32(RotationAddMaxValue);
  builder.writeFloat32(RotationAddMinValue);
  builder.writeFloat32(RotationMaxValue);
  builder.writeFloat32(RotationMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementPosition {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementPosition
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementPosition {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
OffsetXMinValue():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
OffsetXMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
OffsetYMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @returns number
 */
OffsetYMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number OffsetXMinValue
 * @param number OffsetXMaxValue
 * @param number OffsetYMinValue
 * @param number OffsetYMaxValue
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementPosition(builder:flatbuffers.Builder, OffsetXMinValue: number, OffsetXMaxValue: number, OffsetYMinValue: number, OffsetYMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeFloat32(OffsetYMaxValue);
  builder.writeFloat32(OffsetYMinValue);
  builder.writeFloat32(OffsetXMaxValue);
  builder.writeFloat32(OffsetXMinValue);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementGravity {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementGravity
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementGravity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
GravityX():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
GravityY():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Gravity_x
 * @param number Gravity_y
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementGravity(builder:flatbuffers.Builder, Gravity_x: number, Gravity_y: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeFloat32(Gravity_y);
  builder.writeFloat32(Gravity_x);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementDelay {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementDelay
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementDelay {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
DelayTime():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number DelayTime
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementDelay(builder:flatbuffers.Builder, DelayTime: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(DelayTime);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementRndSeedChange {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementRndSeedChange
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementRndSeedChange {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
Seed():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Seed
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementRndSeedChange(builder:flatbuffers.Builder, Seed: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(Seed);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementBasic {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementBasic
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementBasic {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
SsEffectFunctionType():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @returns number
 */
priority():number {
  return this.bb!.readInt32(this.bb_pos + 4);
};

/**
 * @returns number
 */
maximumParticle():number {
  return this.bb!.readInt32(this.bb_pos + 8);
};

/**
 * @returns number
 */
attimeCreate():number {
  return this.bb!.readInt32(this.bb_pos + 12);
};

/**
 * @returns number
 */
interval():number {
  return this.bb!.readInt32(this.bb_pos + 16);
};

/**
 * @returns number
 */
lifetime():number {
  return this.bb!.readInt32(this.bb_pos + 20);
};

/**
 * @returns number
 */
speedMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 24);
};

/**
 * @returns number
 */
speedMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 28);
};

/**
 * @returns number
 */
lifespanMinValue():number {
  return this.bb!.readInt32(this.bb_pos + 32);
};

/**
 * @returns number
 */
lifespanMaxValue():number {
  return this.bb!.readInt32(this.bb_pos + 36);
};

/**
 * @returns number
 */
angle():number {
  return this.bb!.readFloat32(this.bb_pos + 40);
};

/**
 * @returns number
 */
angleVariance():number {
  return this.bb!.readFloat32(this.bb_pos + 44);
};

/**
 * @param flatbuffers.Builder builder
 * @param number SsEffectFunctionType
 * @param number priority
 * @param number maximumParticle
 * @param number attimeCreate
 * @param number interval
 * @param number lifetime
 * @param number speedMinValue
 * @param number speedMaxValue
 * @param number lifespanMinValue
 * @param number lifespanMaxValue
 * @param number angle
 * @param number angleVariance
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementBasic(builder:flatbuffers.Builder, SsEffectFunctionType: number, priority: number, maximumParticle: number, attimeCreate: number, interval: number, lifetime: number, speedMinValue: number, speedMaxValue: number, lifespanMinValue: number, lifespanMaxValue: number, angle: number, angleVariance: number):flatbuffers.Offset {
  builder.prep(4, 48);
  builder.writeFloat32(angleVariance);
  builder.writeFloat32(angle);
  builder.writeInt32(lifespanMaxValue);
  builder.writeInt32(lifespanMinValue);
  builder.writeFloat32(speedMaxValue);
  builder.writeFloat32(speedMinValue);
  builder.writeInt32(lifetime);
  builder.writeInt32(interval);
  builder.writeInt32(attimeCreate);
  builder.writeInt32(maximumParticle);
  builder.writeInt32(priority);
  builder.writeInt32(SsEffectFunctionType);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectNode {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectNode
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EffectNode= obj
 * @returns EffectNode
 */
static getRootAsEffectNode(bb:flatbuffers.ByteBuffer, obj?:EffectNode):EffectNode {
  return (obj || new EffectNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EffectNode= obj
 * @returns EffectNode
 */
static getSizePrefixedRootAsEffectNode(bb:flatbuffers.ByteBuffer, obj?:EffectNode):EffectNode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
arrayIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
parentIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
type():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
cellIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
blendType():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numBehavior():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @returns ss.ssfb.EffectNodeBehavior
 */
BehaviorType(index: number):ss.ssfb.EffectNodeBehavior|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? /**  */ (this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index)) : /**  */ (0);
};

/**
 * @returns number
 */
BehaviorTypeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Uint8Array
 */
BehaviorTypeArray():Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @param flatbuffers.Table= obj
 * @returns ?flatbuffers.Table
 */
Behavior<T extends flatbuffers.Table>(index: number, obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
};

/**
 * @returns number
 */
BehaviorLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startEffectNode(builder:flatbuffers.Builder) {
  builder.startObject(8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number arrayIndex
 */
static addArrayIndex(builder:flatbuffers.Builder, arrayIndex:number) {
  builder.addFieldInt16(0, arrayIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number parentIndex
 */
static addParentIndex(builder:flatbuffers.Builder, parentIndex:number) {
  builder.addFieldInt16(1, parentIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number type
 */
static addType(builder:flatbuffers.Builder, type:number) {
  builder.addFieldInt16(2, type, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number cellIndex
 */
static addCellIndex(builder:flatbuffers.Builder, cellIndex:number) {
  builder.addFieldInt16(3, cellIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number blendType
 */
static addBlendType(builder:flatbuffers.Builder, blendType:number) {
  builder.addFieldInt16(4, blendType, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numBehavior
 */
static addNumBehavior(builder:flatbuffers.Builder, numBehavior:number) {
  builder.addFieldInt16(5, numBehavior, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset BehaviorTypeOffset
 */
static addBehaviorType(builder:flatbuffers.Builder, BehaviorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, BehaviorTypeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<ss.ssfb.EffectNodeBehavior> data
 * @returns flatbuffers.Offset
 */
static createBehaviorTypeVector(builder:flatbuffers.Builder, data:ss.ssfb.EffectNodeBehavior[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startBehaviorTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset BehaviorOffset
 */
static addBehavior(builder:flatbuffers.Builder, BehaviorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, BehaviorOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createBehaviorVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startBehaviorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endEffectNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createEffectNode(builder:flatbuffers.Builder, arrayIndex:number, parentIndex:number, type:number, cellIndex:number, blendType:number, numBehavior:number, BehaviorTypeOffset:flatbuffers.Offset, BehaviorOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectNode.startEffectNode(builder);
  EffectNode.addArrayIndex(builder, arrayIndex);
  EffectNode.addParentIndex(builder, parentIndex);
  EffectNode.addType(builder, type);
  EffectNode.addCellIndex(builder, cellIndex);
  EffectNode.addBlendType(builder, blendType);
  EffectNode.addNumBehavior(builder, numBehavior);
  EffectNode.addBehaviorType(builder, BehaviorTypeOffset);
  EffectNode.addBehavior(builder, BehaviorOffset);
  return EffectNode.endEffectNode(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectFile {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectFile
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectFile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EffectFile= obj
 * @returns EffectFile
 */
static getRootAsEffectFile(bb:flatbuffers.ByteBuffer, obj?:EffectFile):EffectFile {
  return (obj || new EffectFile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EffectFile= obj
 * @returns EffectFile
 */
static getSizePrefixedRootAsEffectFile(bb:flatbuffers.ByteBuffer, obj?:EffectFile):EffectFile {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectFile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
fps():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
isLockRandSeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
lockRandSeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
layoutScaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
layoutScaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numNodeList():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.EffectNode= obj
 * @returns ss.ssfb.EffectNode
 */
effectNode(index: number, obj?:ss.ssfb.EffectNode):ss.ssfb.EffectNode|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ss.ssfb.EffectNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
effectNodeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startEffectFile(builder:flatbuffers.Builder) {
  builder.startObject(8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number fps
 */
static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt16(1, fps, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number isLockRandSeed
 */
static addIsLockRandSeed(builder:flatbuffers.Builder, isLockRandSeed:number) {
  builder.addFieldInt16(2, isLockRandSeed, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number lockRandSeed
 */
static addLockRandSeed(builder:flatbuffers.Builder, lockRandSeed:number) {
  builder.addFieldInt16(3, lockRandSeed, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number layoutScaleX
 */
static addLayoutScaleX(builder:flatbuffers.Builder, layoutScaleX:number) {
  builder.addFieldInt16(4, layoutScaleX, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number layoutScaleY
 */
static addLayoutScaleY(builder:flatbuffers.Builder, layoutScaleY:number) {
  builder.addFieldInt16(5, layoutScaleY, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numNodeList
 */
static addNumNodeList(builder:flatbuffers.Builder, numNodeList:number) {
  builder.addFieldInt16(6, numNodeList, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset effectNodeOffset
 */
static addEffectNode(builder:flatbuffers.Builder, effectNodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, effectNodeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createEffectNodeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startEffectNodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endEffectFile(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createEffectFile(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, fps:number, isLockRandSeed:number, lockRandSeed:number, layoutScaleX:number, layoutScaleY:number, numNodeList:number, effectNodeOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectFile.startEffectFile(builder);
  EffectFile.addName(builder, nameOffset);
  EffectFile.addFps(builder, fps);
  EffectFile.addIsLockRandSeed(builder, isLockRandSeed);
  EffectFile.addLockRandSeed(builder, lockRandSeed);
  EffectFile.addLayoutScaleX(builder, layoutScaleX);
  EffectFile.addLayoutScaleY(builder, layoutScaleY);
  EffectFile.addNumNodeList(builder, numNodeList);
  EffectFile.addEffectNode(builder, effectNodeOffset);
  return EffectFile.endEffectFile(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class CellMap {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CellMap
 */
__init(i:number, bb:flatbuffers.ByteBuffer):CellMap {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CellMap= obj
 * @returns CellMap
 */
static getRootAsCellMap(bb:flatbuffers.ByteBuffer, obj?:CellMap):CellMap {
  return (obj || new CellMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CellMap= obj
 * @returns CellMap
 */
static getSizePrefixedRootAsCellMap(bb:flatbuffers.ByteBuffer, obj?:CellMap):CellMap {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CellMap()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
imagePath():string|null
imagePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imagePath(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
wrapmode():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
filtermode():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCellMap(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset imagePathOffset
 */
static addImagePath(builder:flatbuffers.Builder, imagePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, imagePathOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(2, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number wrapmode
 */
static addWrapmode(builder:flatbuffers.Builder, wrapmode:number) {
  builder.addFieldInt16(3, wrapmode, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number filtermode
 */
static addFiltermode(builder:flatbuffers.Builder, filtermode:number) {
  builder.addFieldInt16(4, filtermode, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCellMap(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createCellMap(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, imagePathOffset:flatbuffers.Offset, index:number, wrapmode:number, filtermode:number):flatbuffers.Offset {
  CellMap.startCellMap(builder);
  CellMap.addName(builder, nameOffset);
  CellMap.addImagePath(builder, imagePathOffset);
  CellMap.addIndex(builder, index);
  CellMap.addWrapmode(builder, wrapmode);
  CellMap.addFiltermode(builder, filtermode);
  return CellMap.endCellMap(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class Cell {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Cell
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Cell {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Cell= obj
 * @returns Cell
 */
static getRootAsCell(bb:flatbuffers.ByteBuffer, obj?:Cell):Cell {
  return (obj || new Cell()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Cell= obj
 * @returns Cell
 */
static getSizePrefixedRootAsCell(bb:flatbuffers.ByteBuffer, obj?:Cell):Cell {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Cell()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param ss.ssfb.CellMap= obj
 * @returns ss.ssfb.CellMap|null
 */
cellMap(obj?:ss.ssfb.CellMap):ss.ssfb.CellMap|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.CellMap()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns number
 */
indexInCellMap():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
x():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
y():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
width():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
height():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
pivotX():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pivotY():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
u1():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
v1():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
u2():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
v2():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCell(builder:flatbuffers.Builder) {
  builder.startObject(13);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset cellMapOffset
 */
static addCellMap(builder:flatbuffers.Builder, cellMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cellMapOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number indexInCellMap
 */
static addIndexInCellMap(builder:flatbuffers.Builder, indexInCellMap:number) {
  builder.addFieldInt16(2, indexInCellMap, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 */
static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt16(3, x, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number y
 */
static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt16(4, y, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number width
 */
static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt16(5, width, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number height
 */
static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt16(6, height, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotX
 */
static addPivotX(builder:flatbuffers.Builder, pivotX:number) {
  builder.addFieldFloat32(7, pivotX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotY
 */
static addPivotY(builder:flatbuffers.Builder, pivotY:number) {
  builder.addFieldFloat32(8, pivotY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number u1
 */
static addU1(builder:flatbuffers.Builder, u1:number) {
  builder.addFieldFloat32(9, u1, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number v1
 */
static addV1(builder:flatbuffers.Builder, v1:number) {
  builder.addFieldFloat32(10, v1, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number u2
 */
static addU2(builder:flatbuffers.Builder, u2:number) {
  builder.addFieldFloat32(11, u2, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number v2
 */
static addV2(builder:flatbuffers.Builder, v2:number) {
  builder.addFieldFloat32(12, v2, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCell(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createCell(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, cellMapOffset:flatbuffers.Offset, indexInCellMap:number, x:number, y:number, width:number, height:number, pivotX:number, pivotY:number, u1:number, v1:number, u2:number, v2:number):flatbuffers.Offset {
  Cell.startCell(builder);
  Cell.addName(builder, nameOffset);
  Cell.addCellMap(builder, cellMapOffset);
  Cell.addIndexInCellMap(builder, indexInCellMap);
  Cell.addX(builder, x);
  Cell.addY(builder, y);
  Cell.addWidth(builder, width);
  Cell.addHeight(builder, height);
  Cell.addPivotX(builder, pivotX);
  Cell.addPivotY(builder, pivotY);
  Cell.addU1(builder, u1);
  Cell.addV1(builder, v1);
  Cell.addU2(builder, u2);
  Cell.addV2(builder, v2);
  return Cell.endCell(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class meshDataUV {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns meshDataUV
 */
__init(i:number, bb:flatbuffers.ByteBuffer):meshDataUV {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param meshDataUV= obj
 * @returns meshDataUV
 */
static getRootAsmeshDataUV(bb:flatbuffers.ByteBuffer, obj?:meshDataUV):meshDataUV {
  return (obj || new meshDataUV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param meshDataUV= obj
 * @returns meshDataUV
 */
static getSizePrefixedRootAsmeshDataUV(bb:flatbuffers.ByteBuffer, obj?:meshDataUV):meshDataUV {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new meshDataUV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
uv(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
uvLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float32Array
 */
uvArray():Float32Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startmeshDataUV(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset uvOffset
 */
static addUv(builder:flatbuffers.Builder, uvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uvOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createUvVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startUvVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endmeshDataUV(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createmeshDataUV(builder:flatbuffers.Builder, uvOffset:flatbuffers.Offset):flatbuffers.Offset {
  meshDataUV.startmeshDataUV(builder);
  meshDataUV.addUv(builder, uvOffset);
  return meshDataUV.endmeshDataUV(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class meshDataIndices {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns meshDataIndices
 */
__init(i:number, bb:flatbuffers.ByteBuffer):meshDataIndices {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param meshDataIndices= obj
 * @returns meshDataIndices
 */
static getRootAsmeshDataIndices(bb:flatbuffers.ByteBuffer, obj?:meshDataIndices):meshDataIndices {
  return (obj || new meshDataIndices()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param meshDataIndices= obj
 * @returns meshDataIndices
 */
static getSizePrefixedRootAsmeshDataIndices(bb:flatbuffers.ByteBuffer, obj?:meshDataIndices):meshDataIndices {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new meshDataIndices()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
indices(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
indicesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float32Array
 */
indicesArray():Float32Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startmeshDataIndices(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset indicesOffset
 */
static addIndices(builder:flatbuffers.Builder, indicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, indicesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createIndicesVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endmeshDataIndices(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createmeshDataIndices(builder:flatbuffers.Builder, indicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  meshDataIndices.startmeshDataIndices(builder);
  meshDataIndices.addIndices(builder, indicesOffset);
  return meshDataIndices.endmeshDataIndices(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class partState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns partState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):partState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param partState= obj
 * @returns partState
 */
static getRootAspartState(bb:flatbuffers.ByteBuffer, obj?:partState):partState {
  return (obj || new partState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param partState= obj
 * @returns partState
 */
static getSizePrefixedRootAspartState(bb:flatbuffers.ByteBuffer, obj?:partState):partState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new partState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
flag1():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
flag2():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @returns number
 */
data(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
dataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Uint32Array
 */
dataArray():Uint32Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startpartState(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number flag1
 */
static addFlag1(builder:flatbuffers.Builder, flag1:number) {
  builder.addFieldInt32(1, flag1, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number flag2
 */
static addFlag2(builder:flatbuffers.Builder, flag2:number) {
  builder.addFieldInt32(2, flag2, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createDataVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endpartState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createpartState(builder:flatbuffers.Builder, index:number, flag1:number, flag2:number, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  partState.startpartState(builder);
  partState.addIndex(builder, index);
  partState.addFlag1(builder, flag1);
  partState.addFlag2(builder, flag2);
  partState.addData(builder, dataOffset);
  return partState.endpartState(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class frameDataIndex {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns frameDataIndex
 */
__init(i:number, bb:flatbuffers.ByteBuffer):frameDataIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param frameDataIndex= obj
 * @returns frameDataIndex
 */
static getRootAsframeDataIndex(bb:flatbuffers.ByteBuffer, obj?:frameDataIndex):frameDataIndex {
  return (obj || new frameDataIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param frameDataIndex= obj
 * @returns frameDataIndex
 */
static getSizePrefixedRootAsframeDataIndex(bb:flatbuffers.ByteBuffer, obj?:frameDataIndex):frameDataIndex {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new frameDataIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param ss.ssfb.partState= obj
 * @returns ss.ssfb.partState
 */
states(index: number, obj?:ss.ssfb.partState):ss.ssfb.partState|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ss.ssfb.partState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
statesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startframeDataIndex(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset statesOffset
 */
static addStates(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, statesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endframeDataIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createframeDataIndex(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset):flatbuffers.Offset {
  frameDataIndex.startframeDataIndex(builder);
  frameDataIndex.addStates(builder, statesOffset);
  return frameDataIndex.endframeDataIndex(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class userDataInteger {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns userDataInteger
 */
__init(i:number, bb:flatbuffers.ByteBuffer):userDataInteger {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
integer():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number integer
 * @returns flatbuffers.Offset
 */
static createuserDataInteger(builder:flatbuffers.Builder, integer: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(integer);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class userDataRect {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns userDataRect
 */
__init(i:number, bb:flatbuffers.ByteBuffer):userDataRect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readInt32(this.bb_pos + 4);
};

/**
 * @returns number
 */
w():number {
  return this.bb!.readInt32(this.bb_pos + 8);
};

/**
 * @returns number
 */
h():number {
  return this.bb!.readInt32(this.bb_pos + 12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number w
 * @param number h
 * @returns flatbuffers.Offset
 */
static createuserDataRect(builder:flatbuffers.Builder, x: number, y: number, w: number, h: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeInt32(h);
  builder.writeInt32(w);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class userDataPoint {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns userDataPoint
 */
__init(i:number, bb:flatbuffers.ByteBuffer):userDataPoint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readInt32(this.bb_pos + 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createuserDataPoint(builder:flatbuffers.Builder, x: number, y: number):flatbuffers.Offset {
  builder.prep(4, 8);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class userDataString {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns userDataString
 */
__init(i:number, bb:flatbuffers.ByteBuffer):userDataString {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param userDataString= obj
 * @returns userDataString
 */
static getRootAsuserDataString(bb:flatbuffers.ByteBuffer, obj?:userDataString):userDataString {
  return (obj || new userDataString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param userDataString= obj
 * @returns userDataString
 */
static getSizePrefixedRootAsuserDataString(bb:flatbuffers.ByteBuffer, obj?:userDataString):userDataString {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new userDataString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
length():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
data():string|null
data(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
data(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startuserDataString(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number length
 */
static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldInt32(0, length, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static enduserDataString(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createuserDataString(builder:flatbuffers.Builder, length:number, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  userDataString.startuserDataString(builder);
  userDataString.addLength(builder, length);
  userDataString.addData(builder, dataOffset);
  return userDataString.enduserDataString(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class userDataItem {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns userDataItem
 */
__init(i:number, bb:flatbuffers.ByteBuffer):userDataItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param userDataItem= obj
 * @returns userDataItem
 */
static getRootAsuserDataItem(bb:flatbuffers.ByteBuffer, obj?:userDataItem):userDataItem {
  return (obj || new userDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param userDataItem= obj
 * @returns userDataItem
 */
static getSizePrefixedRootAsuserDataItem(bb:flatbuffers.ByteBuffer, obj?:userDataItem):userDataItem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new userDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
flags():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
arrayIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @returns ss.ssfb.userDataValue
 */
dataType(index: number):ss.ssfb.userDataValue|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index)) : /**  */ (0);
};

/**
 * @returns number
 */
dataTypeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Uint8Array
 */
dataTypeArray():Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @param flatbuffers.Table= obj
 * @returns ?flatbuffers.Table
 */
data<T extends flatbuffers.Table>(index: number, obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
};

/**
 * @returns number
 */
dataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startuserDataItem(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number flags
 */
static addFlags(builder:flatbuffers.Builder, flags:number) {
  builder.addFieldInt16(0, flags, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number arrayIndex
 */
static addArrayIndex(builder:flatbuffers.Builder, arrayIndex:number) {
  builder.addFieldInt16(1, arrayIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataTypeOffset
 */
static addDataType(builder:flatbuffers.Builder, dataTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataTypeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<ss.ssfb.userDataValue> data
 * @returns flatbuffers.Offset
 */
static createDataTypeVector(builder:flatbuffers.Builder, data:ss.ssfb.userDataValue[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static enduserDataItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createuserDataItem(builder:flatbuffers.Builder, flags:number, arrayIndex:number, dataTypeOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  userDataItem.startuserDataItem(builder);
  userDataItem.addFlags(builder, flags);
  userDataItem.addArrayIndex(builder, arrayIndex);
  userDataItem.addDataType(builder, dataTypeOffset);
  userDataItem.addData(builder, dataOffset);
  return userDataItem.enduserDataItem(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class userDataPerFrame {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns userDataPerFrame
 */
__init(i:number, bb:flatbuffers.ByteBuffer):userDataPerFrame {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param userDataPerFrame= obj
 * @returns userDataPerFrame
 */
static getRootAsuserDataPerFrame(bb:flatbuffers.ByteBuffer, obj?:userDataPerFrame):userDataPerFrame {
  return (obj || new userDataPerFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param userDataPerFrame= obj
 * @returns userDataPerFrame
 */
static getSizePrefixedRootAsuserDataPerFrame(bb:flatbuffers.ByteBuffer, obj?:userDataPerFrame):userDataPerFrame {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new userDataPerFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
frameIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.userDataItem= obj
 * @returns ss.ssfb.userDataItem
 */
data(index: number, obj?:ss.ssfb.userDataItem):ss.ssfb.userDataItem|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.userDataItem()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
dataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startuserDataPerFrame(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frameIndex
 */
static addFrameIndex(builder:flatbuffers.Builder, frameIndex:number) {
  builder.addFieldInt16(0, frameIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static enduserDataPerFrame(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createuserDataPerFrame(builder:flatbuffers.Builder, frameIndex:number, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  userDataPerFrame.startuserDataPerFrame(builder);
  userDataPerFrame.addFrameIndex(builder, frameIndex);
  userDataPerFrame.addData(builder, dataOffset);
  return userDataPerFrame.enduserDataPerFrame(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class labelDataItem {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns labelDataItem
 */
__init(i:number, bb:flatbuffers.ByteBuffer):labelDataItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param labelDataItem= obj
 * @returns labelDataItem
 */
static getRootAslabelDataItem(bb:flatbuffers.ByteBuffer, obj?:labelDataItem):labelDataItem {
  return (obj || new labelDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param labelDataItem= obj
 * @returns labelDataItem
 */
static getSizePrefixedRootAslabelDataItem(bb:flatbuffers.ByteBuffer, obj?:labelDataItem):labelDataItem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new labelDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
frameIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startlabelDataItem(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset labelOffset
 */
static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, labelOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frameIndex
 */
static addFrameIndex(builder:flatbuffers.Builder, frameIndex:number) {
  builder.addFieldInt16(1, frameIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endlabelDataItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createlabelDataItem(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset, frameIndex:number):flatbuffers.Offset {
  labelDataItem.startlabelDataItem(builder);
  labelDataItem.addLabel(builder, labelOffset);
  labelDataItem.addFrameIndex(builder, frameIndex);
  return labelDataItem.endlabelDataItem(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class AnimationData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AnimationData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):AnimationData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimationData= obj
 * @returns AnimationData
 */
static getRootAsAnimationData(bb:flatbuffers.ByteBuffer, obj?:AnimationData):AnimationData {
  return (obj || new AnimationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimationData= obj
 * @returns AnimationData
 */
static getSizePrefixedRootAsAnimationData(bb:flatbuffers.ByteBuffer, obj?:AnimationData):AnimationData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param ss.ssfb.AnimationInitialData= obj
 * @returns ss.ssfb.AnimationInitialData
 */
defaultData(index: number, obj?:ss.ssfb.AnimationInitialData):ss.ssfb.AnimationInitialData|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.AnimationInitialData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
defaultDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.frameDataIndex= obj
 * @returns ss.ssfb.frameDataIndex
 */
frameData(index: number, obj?:ss.ssfb.frameDataIndex):ss.ssfb.frameDataIndex|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ss.ssfb.frameDataIndex()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
frameDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.userDataPerFrame= obj
 * @returns ss.ssfb.userDataPerFrame
 */
userData(index: number, obj?:ss.ssfb.userDataPerFrame):ss.ssfb.userDataPerFrame|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ss.ssfb.userDataPerFrame()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
userDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.labelDataItem= obj
 * @returns ss.ssfb.labelDataItem
 */
labelData(index: number, obj?:ss.ssfb.labelDataItem):ss.ssfb.labelDataItem|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ss.ssfb.labelDataItem()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
labelDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.meshDataUV= obj
 * @returns ss.ssfb.meshDataUV
 */
meshsDataUV(index: number, obj?:ss.ssfb.meshDataUV):ss.ssfb.meshDataUV|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ss.ssfb.meshDataUV()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
meshsDataUVLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.meshDataIndices= obj
 * @returns ss.ssfb.meshDataIndices
 */
meshsDataIndices(index: number, obj?:ss.ssfb.meshDataIndices):ss.ssfb.meshDataIndices|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ss.ssfb.meshDataIndices()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
meshsDataIndicesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
startFrames():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
endFrames():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
totalFrames():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
fps():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
labelNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
canvasSizeW():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
canvasSizeH():number {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
canvasPvotX():number {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
canvasPvotY():number {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAnimationData(builder:flatbuffers.Builder) {
  builder.startObject(16);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset defaultDataOffset
 */
static addDefaultData(builder:flatbuffers.Builder, defaultDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, defaultDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createDefaultDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDefaultDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset frameDataOffset
 */
static addFrameData(builder:flatbuffers.Builder, frameDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, frameDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createFrameDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startFrameDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset userDataOffset
 */
static addUserData(builder:flatbuffers.Builder, userDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createUserDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startUserDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset labelDataOffset
 */
static addLabelData(builder:flatbuffers.Builder, labelDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, labelDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createLabelDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startLabelDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset meshsDataUVOffset
 */
static addMeshsDataUV(builder:flatbuffers.Builder, meshsDataUVOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, meshsDataUVOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMeshsDataUVVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMeshsDataUVVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset meshsDataIndicesOffset
 */
static addMeshsDataIndices(builder:flatbuffers.Builder, meshsDataIndicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, meshsDataIndicesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMeshsDataIndicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMeshsDataIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number startFrames
 */
static addStartFrames(builder:flatbuffers.Builder, startFrames:number) {
  builder.addFieldInt16(7, startFrames, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number endFrames
 */
static addEndFrames(builder:flatbuffers.Builder, endFrames:number) {
  builder.addFieldInt16(8, endFrames, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number totalFrames
 */
static addTotalFrames(builder:flatbuffers.Builder, totalFrames:number) {
  builder.addFieldInt16(9, totalFrames, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number fps
 */
static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt16(10, fps, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number labelNum
 */
static addLabelNum(builder:flatbuffers.Builder, labelNum:number) {
  builder.addFieldInt16(11, labelNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasSizeW
 */
static addCanvasSizeW(builder:flatbuffers.Builder, canvasSizeW:number) {
  builder.addFieldInt16(12, canvasSizeW, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasSizeH
 */
static addCanvasSizeH(builder:flatbuffers.Builder, canvasSizeH:number) {
  builder.addFieldInt16(13, canvasSizeH, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasPvotX
 */
static addCanvasPvotX(builder:flatbuffers.Builder, canvasPvotX:number) {
  builder.addFieldFloat32(14, canvasPvotX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasPvotY
 */
static addCanvasPvotY(builder:flatbuffers.Builder, canvasPvotY:number) {
  builder.addFieldFloat32(15, canvasPvotY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAnimationData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createAnimationData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, defaultDataOffset:flatbuffers.Offset, frameDataOffset:flatbuffers.Offset, userDataOffset:flatbuffers.Offset, labelDataOffset:flatbuffers.Offset, meshsDataUVOffset:flatbuffers.Offset, meshsDataIndicesOffset:flatbuffers.Offset, startFrames:number, endFrames:number, totalFrames:number, fps:number, labelNum:number, canvasSizeW:number, canvasSizeH:number, canvasPvotX:number, canvasPvotY:number):flatbuffers.Offset {
  AnimationData.startAnimationData(builder);
  AnimationData.addName(builder, nameOffset);
  AnimationData.addDefaultData(builder, defaultDataOffset);
  AnimationData.addFrameData(builder, frameDataOffset);
  AnimationData.addUserData(builder, userDataOffset);
  AnimationData.addLabelData(builder, labelDataOffset);
  AnimationData.addMeshsDataUV(builder, meshsDataUVOffset);
  AnimationData.addMeshsDataIndices(builder, meshsDataIndicesOffset);
  AnimationData.addStartFrames(builder, startFrames);
  AnimationData.addEndFrames(builder, endFrames);
  AnimationData.addTotalFrames(builder, totalFrames);
  AnimationData.addFps(builder, fps);
  AnimationData.addLabelNum(builder, labelNum);
  AnimationData.addCanvasSizeW(builder, canvasSizeW);
  AnimationData.addCanvasSizeH(builder, canvasSizeH);
  AnimationData.addCanvasPvotX(builder, canvasPvotX);
  AnimationData.addCanvasPvotY(builder, canvasPvotY);
  return AnimationData.endAnimationData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class AnimationInitialData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AnimationInitialData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):AnimationInitialData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimationInitialData= obj
 * @returns AnimationInitialData
 */
static getRootAsAnimationInitialData(bb:flatbuffers.ByteBuffer, obj?:AnimationInitialData):AnimationInitialData {
  return (obj || new AnimationInitialData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimationInitialData= obj
 * @returns AnimationInitialData
 */
static getSizePrefixedRootAsAnimationInitialData(bb:flatbuffers.ByteBuffer, obj?:AnimationInitialData):AnimationInitialData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimationInitialData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
lowflag():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
highflag():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
priority():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
cellIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
opacity():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
localopacity():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
masklimen():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
positionX():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
positionY():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
positionZ():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pivotX():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pivotY():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationX():number {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationY():number {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationZ():number {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
scaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
scaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
localscaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
localscaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeX():number {
  var offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeY():number {
  var offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvMoveX():number {
  var offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvMoveY():number {
  var offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvRotation():number {
  var offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvScaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvScaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
boundingRadius():number {
  var offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
instanceValueCurKeyframe():number {
  var offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueStartFrame():number {
  var offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueEndFrame():number {
  var offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueLoopNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueSpeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
instanceValueLoopflag():number {
  var offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
effectValueCurKeyframe():number {
  var offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
effectValueStartTime():number {
  var offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
effectValueSpeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
effectValueLoopflag():number {
  var offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAnimationInitialData(builder:flatbuffers.Builder) {
  builder.startObject(38);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number lowflag
 */
static addLowflag(builder:flatbuffers.Builder, lowflag:number) {
  builder.addFieldInt32(1, lowflag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number highflag
 */
static addHighflag(builder:flatbuffers.Builder, highflag:number) {
  builder.addFieldInt32(2, highflag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number priority
 */
static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt16(3, priority, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number cellIndex
 */
static addCellIndex(builder:flatbuffers.Builder, cellIndex:number) {
  builder.addFieldInt16(4, cellIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number opacity
 */
static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldInt16(5, opacity, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localopacity
 */
static addLocalopacity(builder:flatbuffers.Builder, localopacity:number) {
  builder.addFieldInt16(6, localopacity, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number masklimen
 */
static addMasklimen(builder:flatbuffers.Builder, masklimen:number) {
  builder.addFieldInt16(7, masklimen, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number positionX
 */
static addPositionX(builder:flatbuffers.Builder, positionX:number) {
  builder.addFieldFloat32(8, positionX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number positionY
 */
static addPositionY(builder:flatbuffers.Builder, positionY:number) {
  builder.addFieldFloat32(9, positionY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number positionZ
 */
static addPositionZ(builder:flatbuffers.Builder, positionZ:number) {
  builder.addFieldFloat32(10, positionZ, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotX
 */
static addPivotX(builder:flatbuffers.Builder, pivotX:number) {
  builder.addFieldFloat32(11, pivotX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotY
 */
static addPivotY(builder:flatbuffers.Builder, pivotY:number) {
  builder.addFieldFloat32(12, pivotY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationX
 */
static addRotationX(builder:flatbuffers.Builder, rotationX:number) {
  builder.addFieldFloat32(13, rotationX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationY
 */
static addRotationY(builder:flatbuffers.Builder, rotationY:number) {
  builder.addFieldFloat32(14, rotationY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationZ
 */
static addRotationZ(builder:flatbuffers.Builder, rotationZ:number) {
  builder.addFieldFloat32(15, rotationZ, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleX
 */
static addScaleX(builder:flatbuffers.Builder, scaleX:number) {
  builder.addFieldFloat32(16, scaleX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleY
 */
static addScaleY(builder:flatbuffers.Builder, scaleY:number) {
  builder.addFieldFloat32(17, scaleY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localscaleX
 */
static addLocalscaleX(builder:flatbuffers.Builder, localscaleX:number) {
  builder.addFieldFloat32(18, localscaleX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localscaleY
 */
static addLocalscaleY(builder:flatbuffers.Builder, localscaleY:number) {
  builder.addFieldFloat32(19, localscaleY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeX
 */
static addSizeX(builder:flatbuffers.Builder, sizeX:number) {
  builder.addFieldFloat32(20, sizeX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeY
 */
static addSizeY(builder:flatbuffers.Builder, sizeY:number) {
  builder.addFieldFloat32(21, sizeY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvMoveX
 */
static addUvMoveX(builder:flatbuffers.Builder, uvMoveX:number) {
  builder.addFieldFloat32(22, uvMoveX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvMoveY
 */
static addUvMoveY(builder:flatbuffers.Builder, uvMoveY:number) {
  builder.addFieldFloat32(23, uvMoveY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvRotation
 */
static addUvRotation(builder:flatbuffers.Builder, uvRotation:number) {
  builder.addFieldFloat32(24, uvRotation, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvScaleX
 */
static addUvScaleX(builder:flatbuffers.Builder, uvScaleX:number) {
  builder.addFieldFloat32(25, uvScaleX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvScaleY
 */
static addUvScaleY(builder:flatbuffers.Builder, uvScaleY:number) {
  builder.addFieldFloat32(26, uvScaleY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boundingRadius
 */
static addBoundingRadius(builder:flatbuffers.Builder, boundingRadius:number) {
  builder.addFieldFloat32(27, boundingRadius, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueCurKeyframe
 */
static addInstanceValueCurKeyframe(builder:flatbuffers.Builder, instanceValueCurKeyframe:number) {
  builder.addFieldInt32(28, instanceValueCurKeyframe, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueStartFrame
 */
static addInstanceValueStartFrame(builder:flatbuffers.Builder, instanceValueStartFrame:number) {
  builder.addFieldInt32(29, instanceValueStartFrame, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueEndFrame
 */
static addInstanceValueEndFrame(builder:flatbuffers.Builder, instanceValueEndFrame:number) {
  builder.addFieldInt32(30, instanceValueEndFrame, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueLoopNum
 */
static addInstanceValueLoopNum(builder:flatbuffers.Builder, instanceValueLoopNum:number) {
  builder.addFieldInt32(31, instanceValueLoopNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueSpeed
 */
static addInstanceValueSpeed(builder:flatbuffers.Builder, instanceValueSpeed:number) {
  builder.addFieldFloat32(32, instanceValueSpeed, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueLoopflag
 */
static addInstanceValueLoopflag(builder:flatbuffers.Builder, instanceValueLoopflag:number) {
  builder.addFieldInt32(33, instanceValueLoopflag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueCurKeyframe
 */
static addEffectValueCurKeyframe(builder:flatbuffers.Builder, effectValueCurKeyframe:number) {
  builder.addFieldInt32(34, effectValueCurKeyframe, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueStartTime
 */
static addEffectValueStartTime(builder:flatbuffers.Builder, effectValueStartTime:number) {
  builder.addFieldInt32(35, effectValueStartTime, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueSpeed
 */
static addEffectValueSpeed(builder:flatbuffers.Builder, effectValueSpeed:number) {
  builder.addFieldFloat32(36, effectValueSpeed, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueLoopflag
 */
static addEffectValueLoopflag(builder:flatbuffers.Builder, effectValueLoopflag:number) {
  builder.addFieldInt32(37, effectValueLoopflag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAnimationInitialData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createAnimationInitialData(builder:flatbuffers.Builder, index:number, lowflag:number, highflag:number, priority:number, cellIndex:number, opacity:number, localopacity:number, masklimen:number, positionX:number, positionY:number, positionZ:number, pivotX:number, pivotY:number, rotationX:number, rotationY:number, rotationZ:number, scaleX:number, scaleY:number, localscaleX:number, localscaleY:number, sizeX:number, sizeY:number, uvMoveX:number, uvMoveY:number, uvRotation:number, uvScaleX:number, uvScaleY:number, boundingRadius:number, instanceValueCurKeyframe:number, instanceValueStartFrame:number, instanceValueEndFrame:number, instanceValueLoopNum:number, instanceValueSpeed:number, instanceValueLoopflag:number, effectValueCurKeyframe:number, effectValueStartTime:number, effectValueSpeed:number, effectValueLoopflag:number):flatbuffers.Offset {
  AnimationInitialData.startAnimationInitialData(builder);
  AnimationInitialData.addIndex(builder, index);
  AnimationInitialData.addLowflag(builder, lowflag);
  AnimationInitialData.addHighflag(builder, highflag);
  AnimationInitialData.addPriority(builder, priority);
  AnimationInitialData.addCellIndex(builder, cellIndex);
  AnimationInitialData.addOpacity(builder, opacity);
  AnimationInitialData.addLocalopacity(builder, localopacity);
  AnimationInitialData.addMasklimen(builder, masklimen);
  AnimationInitialData.addPositionX(builder, positionX);
  AnimationInitialData.addPositionY(builder, positionY);
  AnimationInitialData.addPositionZ(builder, positionZ);
  AnimationInitialData.addPivotX(builder, pivotX);
  AnimationInitialData.addPivotY(builder, pivotY);
  AnimationInitialData.addRotationX(builder, rotationX);
  AnimationInitialData.addRotationY(builder, rotationY);
  AnimationInitialData.addRotationZ(builder, rotationZ);
  AnimationInitialData.addScaleX(builder, scaleX);
  AnimationInitialData.addScaleY(builder, scaleY);
  AnimationInitialData.addLocalscaleX(builder, localscaleX);
  AnimationInitialData.addLocalscaleY(builder, localscaleY);
  AnimationInitialData.addSizeX(builder, sizeX);
  AnimationInitialData.addSizeY(builder, sizeY);
  AnimationInitialData.addUvMoveX(builder, uvMoveX);
  AnimationInitialData.addUvMoveY(builder, uvMoveY);
  AnimationInitialData.addUvRotation(builder, uvRotation);
  AnimationInitialData.addUvScaleX(builder, uvScaleX);
  AnimationInitialData.addUvScaleY(builder, uvScaleY);
  AnimationInitialData.addBoundingRadius(builder, boundingRadius);
  AnimationInitialData.addInstanceValueCurKeyframe(builder, instanceValueCurKeyframe);
  AnimationInitialData.addInstanceValueStartFrame(builder, instanceValueStartFrame);
  AnimationInitialData.addInstanceValueEndFrame(builder, instanceValueEndFrame);
  AnimationInitialData.addInstanceValueLoopNum(builder, instanceValueLoopNum);
  AnimationInitialData.addInstanceValueSpeed(builder, instanceValueSpeed);
  AnimationInitialData.addInstanceValueLoopflag(builder, instanceValueLoopflag);
  AnimationInitialData.addEffectValueCurKeyframe(builder, effectValueCurKeyframe);
  AnimationInitialData.addEffectValueStartTime(builder, effectValueStartTime);
  AnimationInitialData.addEffectValueSpeed(builder, effectValueSpeed);
  AnimationInitialData.addEffectValueLoopflag(builder, effectValueLoopflag);
  return AnimationInitialData.endAnimationInitialData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class PartData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PartData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PartData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartData= obj
 * @returns PartData
 */
static getRootAsPartData(bb:flatbuffers.ByteBuffer, obj?:PartData):PartData {
  return (obj || new PartData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartData= obj
 * @returns PartData
 */
static getSizePrefixedRootAsPartData(bb:flatbuffers.ByteBuffer, obj?:PartData):PartData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PartData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
parentIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns ss.ssfb.SsPartType
 */
type():ss.ssfb.SsPartType {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.SsPartType.Nulltype;
};

/**
 * @returns number
 */
boundsType():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
alphaBlendType():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
refname():string|null
refname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refname(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
effectfilename():string|null
effectfilename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectfilename(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
colorLabel():string|null
colorLabel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
colorLabel(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
maskInfluence():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPartData(builder:flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(1, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number parentIndex
 */
static addParentIndex(builder:flatbuffers.Builder, parentIndex:number) {
  builder.addFieldInt16(2, parentIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.SsPartType type
 */
static addType(builder:flatbuffers.Builder, type:ss.ssfb.SsPartType) {
  builder.addFieldInt8(3, type, ss.ssfb.SsPartType.Nulltype);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boundsType
 */
static addBoundsType(builder:flatbuffers.Builder, boundsType:number) {
  builder.addFieldInt16(4, boundsType, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number alphaBlendType
 */
static addAlphaBlendType(builder:flatbuffers.Builder, alphaBlendType:number) {
  builder.addFieldInt16(5, alphaBlendType, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset refnameOffset
 */
static addRefname(builder:flatbuffers.Builder, refnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, refnameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset effectfilenameOffset
 */
static addEffectfilename(builder:flatbuffers.Builder, effectfilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, effectfilenameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset colorLabelOffset
 */
static addColorLabel(builder:flatbuffers.Builder, colorLabelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, colorLabelOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number maskInfluence
 */
static addMaskInfluence(builder:flatbuffers.Builder, maskInfluence:number) {
  builder.addFieldInt16(9, maskInfluence, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPartData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPartData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, index:number, parentIndex:number, type:ss.ssfb.SsPartType, boundsType:number, alphaBlendType:number, refnameOffset:flatbuffers.Offset, effectfilenameOffset:flatbuffers.Offset, colorLabelOffset:flatbuffers.Offset, maskInfluence:number):flatbuffers.Offset {
  PartData.startPartData(builder);
  PartData.addName(builder, nameOffset);
  PartData.addIndex(builder, index);
  PartData.addParentIndex(builder, parentIndex);
  PartData.addType(builder, type);
  PartData.addBoundsType(builder, boundsType);
  PartData.addAlphaBlendType(builder, alphaBlendType);
  PartData.addRefname(builder, refnameOffset);
  PartData.addEffectfilename(builder, effectfilenameOffset);
  PartData.addColorLabel(builder, colorLabelOffset);
  PartData.addMaskInfluence(builder, maskInfluence);
  return PartData.endPartData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class AnimePackData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AnimePackData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):AnimePackData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimePackData= obj
 * @returns AnimePackData
 */
static getRootAsAnimePackData(bb:flatbuffers.ByteBuffer, obj?:AnimePackData):AnimePackData {
  return (obj || new AnimePackData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimePackData= obj
 * @returns AnimePackData
 */
static getSizePrefixedRootAsAnimePackData(bb:flatbuffers.ByteBuffer, obj?:AnimePackData):AnimePackData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimePackData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param ss.ssfb.PartData= obj
 * @returns ss.ssfb.PartData
 */
parts(index: number, obj?:ss.ssfb.PartData):ss.ssfb.PartData|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.PartData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
partsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.AnimationData= obj
 * @returns ss.ssfb.AnimationData
 */
animations(index: number, obj?:ss.ssfb.AnimationData):ss.ssfb.AnimationData|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ss.ssfb.AnimationData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
animationsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAnimePackData(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset partsOffset
 */
static addParts(builder:flatbuffers.Builder, partsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, partsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createPartsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPartsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset animationsOffset
 */
static addAnimations(builder:flatbuffers.Builder, animationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, animationsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createAnimationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startAnimationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAnimePackData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createAnimePackData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, partsOffset:flatbuffers.Offset, animationsOffset:flatbuffers.Offset):flatbuffers.Offset {
  AnimePackData.startAnimePackData(builder);
  AnimePackData.addName(builder, nameOffset);
  AnimePackData.addParts(builder, partsOffset);
  AnimePackData.addAnimations(builder, animationsOffset);
  return AnimePackData.endAnimePackData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class ProjectData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns ProjectData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):ProjectData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ProjectData= obj
 * @returns ProjectData
 */
static getRootAsProjectData(bb:flatbuffers.ByteBuffer, obj?:ProjectData):ProjectData {
  return (obj || new ProjectData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ProjectData= obj
 * @returns ProjectData
 */
static getSizePrefixedRootAsProjectData(bb:flatbuffers.ByteBuffer, obj?:ProjectData):ProjectData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProjectData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @returns boolean
 */
static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SSFB');
};

/**
 * @returns number
 */
dataId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
version():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
flags():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
imageBaseDir():string|null
imageBaseDir(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageBaseDir(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param ss.ssfb.Cell= obj
 * @returns ss.ssfb.Cell
 */
cells(index: number, obj?:ss.ssfb.Cell):ss.ssfb.Cell|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ss.ssfb.Cell()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
cellsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.AnimePackData= obj
 * @returns ss.ssfb.AnimePackData
 */
animePacks(index: number, obj?:ss.ssfb.AnimePackData):ss.ssfb.AnimePackData|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ss.ssfb.AnimePackData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
animePacksLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.EffectFile= obj
 * @returns ss.ssfb.EffectFile
 */
effectFileList(index: number, obj?:ss.ssfb.EffectFile):ss.ssfb.EffectFile|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ss.ssfb.EffectFile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
effectFileListLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numCells():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numAnimePacks():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numEffectFileList():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startProjectData(builder:flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param number dataId
 */
static addDataId(builder:flatbuffers.Builder, dataId:number) {
  builder.addFieldInt32(0, dataId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number version
 */
static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number flags
 */
static addFlags(builder:flatbuffers.Builder, flags:number) {
  builder.addFieldInt32(2, flags, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset imageBaseDirOffset
 */
static addImageBaseDir(builder:flatbuffers.Builder, imageBaseDirOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, imageBaseDirOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset cellsOffset
 */
static addCells(builder:flatbuffers.Builder, cellsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, cellsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createCellsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startCellsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset animePacksOffset
 */
static addAnimePacks(builder:flatbuffers.Builder, animePacksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, animePacksOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createAnimePacksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startAnimePacksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset effectFileListOffset
 */
static addEffectFileList(builder:flatbuffers.Builder, effectFileListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, effectFileListOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createEffectFileListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startEffectFileListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numCells
 */
static addNumCells(builder:flatbuffers.Builder, numCells:number) {
  builder.addFieldInt16(7, numCells, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numAnimePacks
 */
static addNumAnimePacks(builder:flatbuffers.Builder, numAnimePacks:number) {
  builder.addFieldInt16(8, numAnimePacks, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numEffectFileList
 */
static addNumEffectFileList(builder:flatbuffers.Builder, numEffectFileList:number) {
  builder.addFieldInt16(9, numEffectFileList, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endProjectData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishProjectDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSFB');
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedProjectDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSFB', true);
};

static createProjectData(builder:flatbuffers.Builder, dataId:number, version:number, flags:number, imageBaseDirOffset:flatbuffers.Offset, cellsOffset:flatbuffers.Offset, animePacksOffset:flatbuffers.Offset, effectFileListOffset:flatbuffers.Offset, numCells:number, numAnimePacks:number, numEffectFileList:number):flatbuffers.Offset {
  ProjectData.startProjectData(builder);
  ProjectData.addDataId(builder, dataId);
  ProjectData.addVersion(builder, version);
  ProjectData.addFlags(builder, flags);
  ProjectData.addImageBaseDir(builder, imageBaseDirOffset);
  ProjectData.addCells(builder, cellsOffset);
  ProjectData.addAnimePacks(builder, animePacksOffset);
  ProjectData.addEffectFileList(builder, effectFileListOffset);
  ProjectData.addNumCells(builder, numCells);
  ProjectData.addNumAnimePacks(builder, numAnimePacks);
  ProjectData.addNumEffectFileList(builder, numEffectFileList);
  return ProjectData.endProjectData(builder);
}
}
}
