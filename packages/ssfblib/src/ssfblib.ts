// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum SsPartType{
  Invalid= -1,
  Nulltype= 0,
  Normal= 1,
  Text= 2,
  Instance= 3,
  Armature= 4,
  Effect= 5,
  Mesh= 6,
  Movenode= 7,
  Constraint= 8,
  Mask= 9,
  Joint= 10,
  Bonepoint= 11
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum PartFlag{
  Invisible= 1,
  FlipH= 2,
  FlipV= 4,
  CellIndex= 8,
  PositionX= 16,
  PositionY= 32,
  PositionZ= 64,
  PivotX= 128,
  PivotY= 256,
  RotationX= 512,
  RotationY= 1024,
  RotationZ= 2048,
  ScaleX= 4096,
  ScaleY= 8192,
  LocalScaleX= 16384,
  LocalScaleY= 32768,
  Opacity= 65536,
  LocalOpacity= 131072,
  PartsColor= 262144,
  VertexTransform= 524288,
  SizeX= 1048576,
  SizeY= 2097152,
  UMove= 4194304,
  VMove= 8388608,
  UvRotation= 16777216,
  UScale= 33554432,
  VScale= 67108864,
  BoundingRadius= 134217728,
  Mask= 268435456,
  Priority= 536870912,
  InstanceKeyframe= 1073741824,
  EffectKeyframe= 2147483648
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum PartFlag2{
  MeshData= 1
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum VertexFlag{
  LT= 1,
  RT= 2,
  LB= 4,
  RB= 8,
  ONE= 16
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum InstanceLoopFlag{
  Infinity= 1,
  Reverse= 2,
  PingPong= 4,
  Independent= 8
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum EffectLoopFlag{
  Independent= 1
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum UserDataFlag{
  Integer= 1,
  Rect= 2,
  Point= 4,
  String= 8
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum SsEffectFunctionType{
  Base= 0,
  Basic= 1,
  RndSeedChange= 2,
  Delay= 3,
  Gravity= 4,
  Position= 5,
  Rotation= 6,
  TransRotation= 7,
  TransSpeed= 8,
  TangentialAcceleration= 9,
  InitColor= 10,
  TransColor= 11,
  AlphaFade= 12,
  Size= 13,
  TransSize= 14,
  PointGravity= 15,
  TurnToDirectionEnabled= 16,
  InfiniteEmitEnabled= 17
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum EffectBehaviorFlags{
  Base= 1,
  Basic= 2,
  RndSeedChange= 4,
  Delay= 8,
  Gravity= 16,
  Position= 32,
  Rotation= 64,
  TransRotation= 128,
  TransSpeed= 256,
  TangentialAcceleration= 512,
  InitColor= 1024,
  TransColor= 2048,
  AlphaFade= 4096,
  Size= 8192,
  TransSize= 16384,
  PointGravity= 32768,
  TurnToDirectionEnabled= 65536,
  InfiniteEmitEnabled= 131072
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum EffectNodeType{
  Invalid= -1,
  Root= 0,
  Emitter= 1,
  Particle= 2
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum EffectRenderBlendType{
  Invalid= -1,
  Mix= 0,
  Add= 1
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum TexWrapMode{
  invalid= -1,
  clamp= 0,
  repeat= 1,
  mirror= 2
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum TexFilterMode{
  invalid= -1,
  nearlest= 0,
  linear= 1
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum BoundsType{
  invalid= -1,
  none= 0,
  quad= 1,
  aabb= 2,
  circle= 3,
  circle_smin= 4,
  circle_smax= 5
}};

/**
 * @enum {number}
 */
export namespace ss.ssfb{
export enum BlendType{
  invalid= -1,
  mix= 0,
  mul= 1,
  add= 2,
  sub= 3,
  mulalpha= 4,
  screen= 5,
  exclusion= 6,
  invert= 7
}};

/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectParticleElementBasic {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectParticleElementBasic
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementBasic {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
ssEffectFunctionType():number {
  return this.bb!.readInt32(this.bb_pos);
};

/**
 * @returns number
 */
priority():number {
  return this.bb!.readInt32(this.bb_pos + 4);
};

/**
 * @returns number
 */
maximumParticle():number {
  return this.bb!.readInt32(this.bb_pos + 8);
};

/**
 * @returns number
 */
attimeCreate():number {
  return this.bb!.readInt32(this.bb_pos + 12);
};

/**
 * @returns number
 */
interval():number {
  return this.bb!.readInt32(this.bb_pos + 16);
};

/**
 * @returns number
 */
lifetime():number {
  return this.bb!.readInt32(this.bb_pos + 20);
};

/**
 * @returns number
 */
speedMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 24);
};

/**
 * @returns number
 */
speedMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 28);
};

/**
 * @returns number
 */
lifespanMinValue():number {
  return this.bb!.readInt32(this.bb_pos + 32);
};

/**
 * @returns number
 */
lifespanMaxValue():number {
  return this.bb!.readInt32(this.bb_pos + 36);
};

/**
 * @returns number
 */
angle():number {
  return this.bb!.readFloat32(this.bb_pos + 40);
};

/**
 * @returns number
 */
angleVariance():number {
  return this.bb!.readFloat32(this.bb_pos + 44);
};

/**
 * @param flatbuffers.Builder builder
 * @param number ss_effect_function_type
 * @param number priority
 * @param number maximum_particle
 * @param number attime_create
 * @param number interval
 * @param number lifetime
 * @param number speed_min_value
 * @param number speed_max_value
 * @param number lifespan_min_value
 * @param number lifespan_max_value
 * @param number angle
 * @param number angle_variance
 * @returns flatbuffers.Offset
 */
static createEffectParticleElementBasic(builder:flatbuffers.Builder, ss_effect_function_type: number, priority: number, maximum_particle: number, attime_create: number, interval: number, lifetime: number, speed_min_value: number, speed_max_value: number, lifespan_min_value: number, lifespan_max_value: number, angle: number, angle_variance: number):flatbuffers.Offset {
  builder.prep(4, 48);
  builder.writeFloat32(angle_variance);
  builder.writeFloat32(angle);
  builder.writeInt32(lifespan_max_value);
  builder.writeInt32(lifespan_min_value);
  builder.writeFloat32(speed_max_value);
  builder.writeFloat32(speed_min_value);
  builder.writeInt32(lifetime);
  builder.writeInt32(interval);
  builder.writeInt32(attime_create);
  builder.writeInt32(maximum_particle);
  builder.writeInt32(priority);
  builder.writeInt32(ss_effect_function_type);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectNode {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectNode
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EffectNode= obj
 * @returns EffectNode
 */
static getRootAsEffectNode(bb:flatbuffers.ByteBuffer, obj?:EffectNode):EffectNode {
  return (obj || new EffectNode).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
arrayIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
parentIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns ss.ssfb.EffectNodeType
 */
type():ss.ssfb.EffectNodeType {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.EffectNodeType.Root;
};

/**
 * @returns number
 */
cellIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns ss.ssfb.EffectRenderBlendType
 */
blendType():ss.ssfb.EffectRenderBlendType {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.EffectRenderBlendType.Mix;
};

/**
 * @param ss.ssfb.EffectParticleElementBasic= obj
 * @returns ss.ssfb.EffectParticleElementBasic|null
 */
basicBehavior(obj?:ss.ssfb.EffectParticleElementBasic):ss.ssfb.EffectParticleElementBasic|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ss.ssfb.EffectParticleElementBasic).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns ss.ssfb.EffectBehaviorFlags
 */
behaviorFlags():ss.ssfb.EffectBehaviorFlags {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? /**  */ (this.bb!.readUint32(this.bb_pos + offset)) : /** } */ (0);
};

/**
 * @returns number
 */
seed():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
delayTime():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
gravityX():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
gravityY():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
offsetXMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
offsetXMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
offsetYMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
offsetYMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationAddMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationAddMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationFactor():number {
  var offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
endLifeTimePer():number {
  var offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
speedMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
speedMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
accelerationMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
accelerationMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
initColorMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
initColorMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
transColorMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
transColorMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
disprangeMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
disprangeMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeXMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeXMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeYMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeYMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
scaleFactorMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
scaleFactorMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
transSizeXMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
transSizeXMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
transSizeYMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
transSizeYMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
transScaleFactorMinValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
transScaleFactorMaxValue():number {
  var offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pointGravityPositionX():number {
  var offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pointGravityPositionY():number {
  var offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pointGravityPower():number {
  var offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotation():number {
  var offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
infinitieEmitFlag():number {
  var offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startEffectNode(builder:flatbuffers.Builder) {
  builder.startObject(48);
};

/**
 * @param flatbuffers.Builder builder
 * @param number arrayIndex
 */
static addArrayIndex(builder:flatbuffers.Builder, arrayIndex:number) {
  builder.addFieldInt16(0, arrayIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number parentIndex
 */
static addParentIndex(builder:flatbuffers.Builder, parentIndex:number) {
  builder.addFieldInt16(1, parentIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.EffectNodeType type
 */
static addType(builder:flatbuffers.Builder, type:ss.ssfb.EffectNodeType) {
  builder.addFieldInt8(2, type, ss.ssfb.EffectNodeType.Root);
};

/**
 * @param flatbuffers.Builder builder
 * @param number cellIndex
 */
static addCellIndex(builder:flatbuffers.Builder, cellIndex:number) {
  builder.addFieldInt16(3, cellIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.EffectRenderBlendType blendType
 */
static addBlendType(builder:flatbuffers.Builder, blendType:ss.ssfb.EffectRenderBlendType) {
  builder.addFieldInt8(4, blendType, ss.ssfb.EffectRenderBlendType.Mix);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset basicBehaviorOffset
 */
static addBasicBehavior(builder:flatbuffers.Builder, basicBehaviorOffset:flatbuffers.Offset) {
  builder.addFieldStruct(5, basicBehaviorOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.EffectBehaviorFlags behaviorFlags
 */
static addBehaviorFlags(builder:flatbuffers.Builder, behaviorFlags:ss.ssfb.EffectBehaviorFlags) {
  builder.addFieldInt32(6, behaviorFlags, /** } */ (0));
};

/**
 * @param flatbuffers.Builder builder
 * @param number seed
 */
static addSeed(builder:flatbuffers.Builder, seed:number) {
  builder.addFieldInt32(7, seed, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number delayTime
 */
static addDelayTime(builder:flatbuffers.Builder, delayTime:number) {
  builder.addFieldInt32(8, delayTime, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gravityX
 */
static addGravityX(builder:flatbuffers.Builder, gravityX:number) {
  builder.addFieldFloat32(9, gravityX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gravityY
 */
static addGravityY(builder:flatbuffers.Builder, gravityY:number) {
  builder.addFieldFloat32(10, gravityY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number offsetXMinValue
 */
static addOffsetXMinValue(builder:flatbuffers.Builder, offsetXMinValue:number) {
  builder.addFieldFloat32(11, offsetXMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number offsetXMaxValue
 */
static addOffsetXMaxValue(builder:flatbuffers.Builder, offsetXMaxValue:number) {
  builder.addFieldFloat32(12, offsetXMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number offsetYMinValue
 */
static addOffsetYMinValue(builder:flatbuffers.Builder, offsetYMinValue:number) {
  builder.addFieldFloat32(13, offsetYMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number offsetYMaxValue
 */
static addOffsetYMaxValue(builder:flatbuffers.Builder, offsetYMaxValue:number) {
  builder.addFieldFloat32(14, offsetYMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationMinValue
 */
static addRotationMinValue(builder:flatbuffers.Builder, rotationMinValue:number) {
  builder.addFieldFloat32(15, rotationMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationMaxValue
 */
static addRotationMaxValue(builder:flatbuffers.Builder, rotationMaxValue:number) {
  builder.addFieldFloat32(16, rotationMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationAddMinValue
 */
static addRotationAddMinValue(builder:flatbuffers.Builder, rotationAddMinValue:number) {
  builder.addFieldFloat32(17, rotationAddMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationAddMaxValue
 */
static addRotationAddMaxValue(builder:flatbuffers.Builder, rotationAddMaxValue:number) {
  builder.addFieldFloat32(18, rotationAddMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationFactor
 */
static addRotationFactor(builder:flatbuffers.Builder, rotationFactor:number) {
  builder.addFieldFloat32(19, rotationFactor, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number endLifeTimePer
 */
static addEndLifeTimePer(builder:flatbuffers.Builder, endLifeTimePer:number) {
  builder.addFieldFloat32(20, endLifeTimePer, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number speedMinValue
 */
static addSpeedMinValue(builder:flatbuffers.Builder, speedMinValue:number) {
  builder.addFieldFloat32(21, speedMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number speedMaxValue
 */
static addSpeedMaxValue(builder:flatbuffers.Builder, speedMaxValue:number) {
  builder.addFieldFloat32(22, speedMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number accelerationMinValue
 */
static addAccelerationMinValue(builder:flatbuffers.Builder, accelerationMinValue:number) {
  builder.addFieldFloat32(23, accelerationMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number accelerationMaxValue
 */
static addAccelerationMaxValue(builder:flatbuffers.Builder, accelerationMaxValue:number) {
  builder.addFieldFloat32(24, accelerationMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number initColorMinValue
 */
static addInitColorMinValue(builder:flatbuffers.Builder, initColorMinValue:number) {
  builder.addFieldInt32(25, initColorMinValue, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number initColorMaxValue
 */
static addInitColorMaxValue(builder:flatbuffers.Builder, initColorMaxValue:number) {
  builder.addFieldInt32(26, initColorMaxValue, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transColorMinValue
 */
static addTransColorMinValue(builder:flatbuffers.Builder, transColorMinValue:number) {
  builder.addFieldInt32(27, transColorMinValue, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transColorMaxValue
 */
static addTransColorMaxValue(builder:flatbuffers.Builder, transColorMaxValue:number) {
  builder.addFieldInt32(28, transColorMaxValue, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number disprangeMinValue
 */
static addDisprangeMinValue(builder:flatbuffers.Builder, disprangeMinValue:number) {
  builder.addFieldFloat32(29, disprangeMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number disprangeMaxValue
 */
static addDisprangeMaxValue(builder:flatbuffers.Builder, disprangeMaxValue:number) {
  builder.addFieldFloat32(30, disprangeMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeXMinValue
 */
static addSizeXMinValue(builder:flatbuffers.Builder, sizeXMinValue:number) {
  builder.addFieldFloat32(31, sizeXMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeXMaxValue
 */
static addSizeXMaxValue(builder:flatbuffers.Builder, sizeXMaxValue:number) {
  builder.addFieldFloat32(32, sizeXMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeYMinValue
 */
static addSizeYMinValue(builder:flatbuffers.Builder, sizeYMinValue:number) {
  builder.addFieldFloat32(33, sizeYMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeYMaxValue
 */
static addSizeYMaxValue(builder:flatbuffers.Builder, sizeYMaxValue:number) {
  builder.addFieldFloat32(34, sizeYMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleFactorMinValue
 */
static addScaleFactorMinValue(builder:flatbuffers.Builder, scaleFactorMinValue:number) {
  builder.addFieldFloat32(35, scaleFactorMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleFactorMaxValue
 */
static addScaleFactorMaxValue(builder:flatbuffers.Builder, scaleFactorMaxValue:number) {
  builder.addFieldFloat32(36, scaleFactorMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transSizeXMinValue
 */
static addTransSizeXMinValue(builder:flatbuffers.Builder, transSizeXMinValue:number) {
  builder.addFieldFloat32(37, transSizeXMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transSizeXMaxValue
 */
static addTransSizeXMaxValue(builder:flatbuffers.Builder, transSizeXMaxValue:number) {
  builder.addFieldFloat32(38, transSizeXMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transSizeYMinValue
 */
static addTransSizeYMinValue(builder:flatbuffers.Builder, transSizeYMinValue:number) {
  builder.addFieldFloat32(39, transSizeYMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transSizeYMaxValue
 */
static addTransSizeYMaxValue(builder:flatbuffers.Builder, transSizeYMaxValue:number) {
  builder.addFieldFloat32(40, transSizeYMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transScaleFactorMinValue
 */
static addTransScaleFactorMinValue(builder:flatbuffers.Builder, transScaleFactorMinValue:number) {
  builder.addFieldFloat32(41, transScaleFactorMinValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transScaleFactorMaxValue
 */
static addTransScaleFactorMaxValue(builder:flatbuffers.Builder, transScaleFactorMaxValue:number) {
  builder.addFieldFloat32(42, transScaleFactorMaxValue, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pointGravityPositionX
 */
static addPointGravityPositionX(builder:flatbuffers.Builder, pointGravityPositionX:number) {
  builder.addFieldFloat32(43, pointGravityPositionX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pointGravityPositionY
 */
static addPointGravityPositionY(builder:flatbuffers.Builder, pointGravityPositionY:number) {
  builder.addFieldFloat32(44, pointGravityPositionY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pointGravityPower
 */
static addPointGravityPower(builder:flatbuffers.Builder, pointGravityPower:number) {
  builder.addFieldFloat32(45, pointGravityPower, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotation
 */
static addRotation(builder:flatbuffers.Builder, rotation:number) {
  builder.addFieldFloat32(46, rotation, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number infinitieEmitFlag
 */
static addInfinitieEmitFlag(builder:flatbuffers.Builder, infinitieEmitFlag:number) {
  builder.addFieldInt32(47, infinitieEmitFlag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endEffectNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createEffectNode(builder:flatbuffers.Builder, arrayIndex:number, parentIndex:number, type:ss.ssfb.EffectNodeType, cellIndex:number, blendType:ss.ssfb.EffectRenderBlendType, basicBehaviorOffset:flatbuffers.Offset, behaviorFlags:ss.ssfb.EffectBehaviorFlags, seed:number, delayTime:number, gravityX:number, gravityY:number, offsetXMinValue:number, offsetXMaxValue:number, offsetYMinValue:number, offsetYMaxValue:number, rotationMinValue:number, rotationMaxValue:number, rotationAddMinValue:number, rotationAddMaxValue:number, rotationFactor:number, endLifeTimePer:number, speedMinValue:number, speedMaxValue:number, accelerationMinValue:number, accelerationMaxValue:number, initColorMinValue:number, initColorMaxValue:number, transColorMinValue:number, transColorMaxValue:number, disprangeMinValue:number, disprangeMaxValue:number, sizeXMinValue:number, sizeXMaxValue:number, sizeYMinValue:number, sizeYMaxValue:number, scaleFactorMinValue:number, scaleFactorMaxValue:number, transSizeXMinValue:number, transSizeXMaxValue:number, transSizeYMinValue:number, transSizeYMaxValue:number, transScaleFactorMinValue:number, transScaleFactorMaxValue:number, pointGravityPositionX:number, pointGravityPositionY:number, pointGravityPower:number, rotation:number, infinitieEmitFlag:number):flatbuffers.Offset {
  EffectNode.startEffectNode(builder);
  EffectNode.addArrayIndex(builder, arrayIndex);
  EffectNode.addParentIndex(builder, parentIndex);
  EffectNode.addType(builder, type);
  EffectNode.addCellIndex(builder, cellIndex);
  EffectNode.addBlendType(builder, blendType);
  EffectNode.addBasicBehavior(builder, basicBehaviorOffset);
  EffectNode.addBehaviorFlags(builder, behaviorFlags);
  EffectNode.addSeed(builder, seed);
  EffectNode.addDelayTime(builder, delayTime);
  EffectNode.addGravityX(builder, gravityX);
  EffectNode.addGravityY(builder, gravityY);
  EffectNode.addOffsetXMinValue(builder, offsetXMinValue);
  EffectNode.addOffsetXMaxValue(builder, offsetXMaxValue);
  EffectNode.addOffsetYMinValue(builder, offsetYMinValue);
  EffectNode.addOffsetYMaxValue(builder, offsetYMaxValue);
  EffectNode.addRotationMinValue(builder, rotationMinValue);
  EffectNode.addRotationMaxValue(builder, rotationMaxValue);
  EffectNode.addRotationAddMinValue(builder, rotationAddMinValue);
  EffectNode.addRotationAddMaxValue(builder, rotationAddMaxValue);
  EffectNode.addRotationFactor(builder, rotationFactor);
  EffectNode.addEndLifeTimePer(builder, endLifeTimePer);
  EffectNode.addSpeedMinValue(builder, speedMinValue);
  EffectNode.addSpeedMaxValue(builder, speedMaxValue);
  EffectNode.addAccelerationMinValue(builder, accelerationMinValue);
  EffectNode.addAccelerationMaxValue(builder, accelerationMaxValue);
  EffectNode.addInitColorMinValue(builder, initColorMinValue);
  EffectNode.addInitColorMaxValue(builder, initColorMaxValue);
  EffectNode.addTransColorMinValue(builder, transColorMinValue);
  EffectNode.addTransColorMaxValue(builder, transColorMaxValue);
  EffectNode.addDisprangeMinValue(builder, disprangeMinValue);
  EffectNode.addDisprangeMaxValue(builder, disprangeMaxValue);
  EffectNode.addSizeXMinValue(builder, sizeXMinValue);
  EffectNode.addSizeXMaxValue(builder, sizeXMaxValue);
  EffectNode.addSizeYMinValue(builder, sizeYMinValue);
  EffectNode.addSizeYMaxValue(builder, sizeYMaxValue);
  EffectNode.addScaleFactorMinValue(builder, scaleFactorMinValue);
  EffectNode.addScaleFactorMaxValue(builder, scaleFactorMaxValue);
  EffectNode.addTransSizeXMinValue(builder, transSizeXMinValue);
  EffectNode.addTransSizeXMaxValue(builder, transSizeXMaxValue);
  EffectNode.addTransSizeYMinValue(builder, transSizeYMinValue);
  EffectNode.addTransSizeYMaxValue(builder, transSizeYMaxValue);
  EffectNode.addTransScaleFactorMinValue(builder, transScaleFactorMinValue);
  EffectNode.addTransScaleFactorMaxValue(builder, transScaleFactorMaxValue);
  EffectNode.addPointGravityPositionX(builder, pointGravityPositionX);
  EffectNode.addPointGravityPositionY(builder, pointGravityPositionY);
  EffectNode.addPointGravityPower(builder, pointGravityPower);
  EffectNode.addRotation(builder, rotation);
  EffectNode.addInfinitieEmitFlag(builder, infinitieEmitFlag);
  return EffectNode.endEffectNode(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class EffectFile {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EffectFile
 */
__init(i:number, bb:flatbuffers.ByteBuffer):EffectFile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EffectFile= obj
 * @returns EffectFile
 */
static getRootAsEffectFile(bb:flatbuffers.ByteBuffer, obj?:EffectFile):EffectFile {
  return (obj || new EffectFile).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
fps():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
isLockRandSeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
lockRandSeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
layoutScaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
layoutScaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numNodeList():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.EffectNode= obj
 * @returns ss.ssfb.EffectNode
 */
effectNode(index: number, obj?:ss.ssfb.EffectNode):ss.ssfb.EffectNode|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ss.ssfb.EffectNode).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
effectNodeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startEffectFile(builder:flatbuffers.Builder) {
  builder.startObject(8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number fps
 */
static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt16(1, fps, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number isLockRandSeed
 */
static addIsLockRandSeed(builder:flatbuffers.Builder, isLockRandSeed:number) {
  builder.addFieldInt16(2, isLockRandSeed, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number lockRandSeed
 */
static addLockRandSeed(builder:flatbuffers.Builder, lockRandSeed:number) {
  builder.addFieldInt16(3, lockRandSeed, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number layoutScaleX
 */
static addLayoutScaleX(builder:flatbuffers.Builder, layoutScaleX:number) {
  builder.addFieldInt16(4, layoutScaleX, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number layoutScaleY
 */
static addLayoutScaleY(builder:flatbuffers.Builder, layoutScaleY:number) {
  builder.addFieldInt16(5, layoutScaleY, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numNodeList
 */
static addNumNodeList(builder:flatbuffers.Builder, numNodeList:number) {
  builder.addFieldInt16(6, numNodeList, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset effectNodeOffset
 */
static addEffectNode(builder:flatbuffers.Builder, effectNodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, effectNodeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createEffectNodeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startEffectNodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endEffectFile(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createEffectFile(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, fps:number, isLockRandSeed:number, lockRandSeed:number, layoutScaleX:number, layoutScaleY:number, numNodeList:number, effectNodeOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectFile.startEffectFile(builder);
  EffectFile.addName(builder, nameOffset);
  EffectFile.addFps(builder, fps);
  EffectFile.addIsLockRandSeed(builder, isLockRandSeed);
  EffectFile.addLockRandSeed(builder, lockRandSeed);
  EffectFile.addLayoutScaleX(builder, layoutScaleX);
  EffectFile.addLayoutScaleY(builder, layoutScaleY);
  EffectFile.addNumNodeList(builder, numNodeList);
  EffectFile.addEffectNode(builder, effectNodeOffset);
  return EffectFile.endEffectFile(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class CellMap {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CellMap
 */
__init(i:number, bb:flatbuffers.ByteBuffer):CellMap {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CellMap= obj
 * @returns CellMap
 */
static getRootAsCellMap(bb:flatbuffers.ByteBuffer, obj?:CellMap):CellMap {
  return (obj || new CellMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
imagePath():string|null
imagePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imagePath(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns ss.ssfb.TexWrapMode
 */
wrapMode():ss.ssfb.TexWrapMode {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.TexWrapMode.clamp;
};

/**
 * @returns ss.ssfb.TexFilterMode
 */
filterMode():ss.ssfb.TexFilterMode {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.TexFilterMode.nearlest;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCellMap(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset imagePathOffset
 */
static addImagePath(builder:flatbuffers.Builder, imagePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, imagePathOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(2, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.TexWrapMode wrapMode
 */
static addWrapMode(builder:flatbuffers.Builder, wrapMode:ss.ssfb.TexWrapMode) {
  builder.addFieldInt8(3, wrapMode, ss.ssfb.TexWrapMode.clamp);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.TexFilterMode filterMode
 */
static addFilterMode(builder:flatbuffers.Builder, filterMode:ss.ssfb.TexFilterMode) {
  builder.addFieldInt8(4, filterMode, ss.ssfb.TexFilterMode.nearlest);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCellMap(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createCellMap(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, imagePathOffset:flatbuffers.Offset, index:number, wrapMode:ss.ssfb.TexWrapMode, filterMode:ss.ssfb.TexFilterMode):flatbuffers.Offset {
  CellMap.startCellMap(builder);
  CellMap.addName(builder, nameOffset);
  CellMap.addImagePath(builder, imagePathOffset);
  CellMap.addIndex(builder, index);
  CellMap.addWrapMode(builder, wrapMode);
  CellMap.addFilterMode(builder, filterMode);
  return CellMap.endCellMap(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class Cell {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Cell
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Cell {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Cell= obj
 * @returns Cell
 */
static getRootAsCell(bb:flatbuffers.ByteBuffer, obj?:Cell):Cell {
  return (obj || new Cell).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param ss.ssfb.CellMap= obj
 * @returns ss.ssfb.CellMap|null
 */
cellMap(obj?:ss.ssfb.CellMap):ss.ssfb.CellMap|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.CellMap).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns number
 */
indexInCellMap():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
x():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
y():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
width():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
height():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
pivotX():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pivotY():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
u1():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
v1():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
u2():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
v2():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCell(builder:flatbuffers.Builder) {
  builder.startObject(13);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset cellMapOffset
 */
static addCellMap(builder:flatbuffers.Builder, cellMapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cellMapOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number indexInCellMap
 */
static addIndexInCellMap(builder:flatbuffers.Builder, indexInCellMap:number) {
  builder.addFieldInt16(2, indexInCellMap, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 */
static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt16(3, x, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number y
 */
static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt16(4, y, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number width
 */
static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt16(5, width, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number height
 */
static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt16(6, height, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotX
 */
static addPivotX(builder:flatbuffers.Builder, pivotX:number) {
  builder.addFieldFloat32(7, pivotX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotY
 */
static addPivotY(builder:flatbuffers.Builder, pivotY:number) {
  builder.addFieldFloat32(8, pivotY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number u1
 */
static addU1(builder:flatbuffers.Builder, u1:number) {
  builder.addFieldFloat32(9, u1, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number v1
 */
static addV1(builder:flatbuffers.Builder, v1:number) {
  builder.addFieldFloat32(10, v1, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number u2
 */
static addU2(builder:flatbuffers.Builder, u2:number) {
  builder.addFieldFloat32(11, u2, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number v2
 */
static addV2(builder:flatbuffers.Builder, v2:number) {
  builder.addFieldFloat32(12, v2, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCell(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createCell(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, cellMapOffset:flatbuffers.Offset, indexInCellMap:number, x:number, y:number, width:number, height:number, pivotX:number, pivotY:number, u1:number, v1:number, u2:number, v2:number):flatbuffers.Offset {
  Cell.startCell(builder);
  Cell.addName(builder, nameOffset);
  Cell.addCellMap(builder, cellMapOffset);
  Cell.addIndexInCellMap(builder, indexInCellMap);
  Cell.addX(builder, x);
  Cell.addY(builder, y);
  Cell.addWidth(builder, width);
  Cell.addHeight(builder, height);
  Cell.addPivotX(builder, pivotX);
  Cell.addPivotY(builder, pivotY);
  Cell.addU1(builder, u1);
  Cell.addV1(builder, v1);
  Cell.addU2(builder, u2);
  Cell.addV2(builder, v2);
  return Cell.endCell(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class MeshDataUV {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns MeshDataUV
 */
__init(i:number, bb:flatbuffers.ByteBuffer):MeshDataUV {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MeshDataUV= obj
 * @returns MeshDataUV
 */
static getRootAsMeshDataUV(bb:flatbuffers.ByteBuffer, obj?:MeshDataUV):MeshDataUV {
  return (obj || new MeshDataUV).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
uv(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
uvLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float32Array
 */
uvArray():Float32Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startMeshDataUV(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset uvOffset
 */
static addUv(builder:flatbuffers.Builder, uvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uvOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createUvVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startUvVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endMeshDataUV(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createMeshDataUV(builder:flatbuffers.Builder, uvOffset:flatbuffers.Offset):flatbuffers.Offset {
  MeshDataUV.startMeshDataUV(builder);
  MeshDataUV.addUv(builder, uvOffset);
  return MeshDataUV.endMeshDataUV(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class MeshDataIndices {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns MeshDataIndices
 */
__init(i:number, bb:flatbuffers.ByteBuffer):MeshDataIndices {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MeshDataIndices= obj
 * @returns MeshDataIndices
 */
static getRootAsMeshDataIndices(bb:flatbuffers.ByteBuffer, obj?:MeshDataIndices):MeshDataIndices {
  return (obj || new MeshDataIndices).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
indices(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
indicesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float32Array
 */
indicesArray():Float32Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startMeshDataIndices(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset indicesOffset
 */
static addIndices(builder:flatbuffers.Builder, indicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, indicesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createIndicesVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endMeshDataIndices(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createMeshDataIndices(builder:flatbuffers.Builder, indicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  MeshDataIndices.startMeshDataIndices(builder);
  MeshDataIndices.addIndices(builder, indicesOffset);
  return MeshDataIndices.endMeshDataIndices(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class PartState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PartState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PartState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartState= obj
 * @returns PartState
 */
static getRootAsPartState(bb:flatbuffers.ByteBuffer, obj?:PartState):PartState {
  return (obj || new PartState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns ss.ssfb.PartFlag
 */
flag1():ss.ssfb.PartFlag {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /**  */ (this.bb!.readUint32(this.bb_pos + offset)) : /** } */ (0);
};

/**
 * @returns ss.ssfb.PartFlag2
 */
flag2():ss.ssfb.PartFlag2 {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readUint32(this.bb_pos + offset)) : /** } */ (0);
};

/**
 * @param number index
 * @returns number
 */
data(index: number):number|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
dataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Uint32Array
 */
dataArray():Uint32Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPartState(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.PartFlag flag1
 */
static addFlag1(builder:flatbuffers.Builder, flag1:ss.ssfb.PartFlag) {
  builder.addFieldInt32(1, flag1, /** } */ (0));
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.PartFlag2 flag2
 */
static addFlag2(builder:flatbuffers.Builder, flag2:ss.ssfb.PartFlag2) {
  builder.addFieldInt32(2, flag2, /** } */ (0));
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createDataVector(builder:flatbuffers.Builder, data:number[] | Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPartState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPartState(builder:flatbuffers.Builder, index:number, flag1:ss.ssfb.PartFlag, flag2:ss.ssfb.PartFlag2, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  PartState.startPartState(builder);
  PartState.addIndex(builder, index);
  PartState.addFlag1(builder, flag1);
  PartState.addFlag2(builder, flag2);
  PartState.addData(builder, dataOffset);
  return PartState.endPartState(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class FrameDataIndex {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns FrameDataIndex
 */
__init(i:number, bb:flatbuffers.ByteBuffer):FrameDataIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param FrameDataIndex= obj
 * @returns FrameDataIndex
 */
static getRootAsFrameDataIndex(bb:flatbuffers.ByteBuffer, obj?:FrameDataIndex):FrameDataIndex {
  return (obj || new FrameDataIndex).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param ss.ssfb.PartState= obj
 * @returns ss.ssfb.PartState
 */
states(index: number, obj?:ss.ssfb.PartState):ss.ssfb.PartState|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ss.ssfb.PartState).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
statesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startFrameDataIndex(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset statesOffset
 */
static addStates(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, statesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endFrameDataIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createFrameDataIndex(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FrameDataIndex.startFrameDataIndex(builder);
  FrameDataIndex.addStates(builder, statesOffset);
  return FrameDataIndex.endFrameDataIndex(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class UserDataItem {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns UserDataItem
 */
__init(i:number, bb:flatbuffers.ByteBuffer):UserDataItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param UserDataItem= obj
 * @returns UserDataItem
 */
static getRootAsUserDataItem(bb:flatbuffers.ByteBuffer, obj?:UserDataItem):UserDataItem {
  return (obj || new UserDataItem).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns ss.ssfb.UserDataFlag
 */
flags():ss.ssfb.UserDataFlag {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : /** } */ (0);
};

/**
 * @returns number
 */
arrayIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
integer():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
rectX():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
rectY():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
rectW():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
rectH():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
pointX():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
pointY():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
userStringLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
userString():string|null
userString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userString(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startUserDataItem(builder:flatbuffers.Builder) {
  builder.startObject(11);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.UserDataFlag flags
 */
static addFlags(builder:flatbuffers.Builder, flags:ss.ssfb.UserDataFlag) {
  builder.addFieldInt8(0, flags, /** } */ (0));
};

/**
 * @param flatbuffers.Builder builder
 * @param number arrayIndex
 */
static addArrayIndex(builder:flatbuffers.Builder, arrayIndex:number) {
  builder.addFieldInt16(1, arrayIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number integer
 */
static addInteger(builder:flatbuffers.Builder, integer:number) {
  builder.addFieldInt32(2, integer, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rectX
 */
static addRectX(builder:flatbuffers.Builder, rectX:number) {
  builder.addFieldInt32(3, rectX, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rectY
 */
static addRectY(builder:flatbuffers.Builder, rectY:number) {
  builder.addFieldInt32(4, rectY, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rectW
 */
static addRectW(builder:flatbuffers.Builder, rectW:number) {
  builder.addFieldInt32(5, rectW, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rectH
 */
static addRectH(builder:flatbuffers.Builder, rectH:number) {
  builder.addFieldInt32(6, rectH, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pointX
 */
static addPointX(builder:flatbuffers.Builder, pointX:number) {
  builder.addFieldInt32(7, pointX, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pointY
 */
static addPointY(builder:flatbuffers.Builder, pointY:number) {
  builder.addFieldInt32(8, pointY, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number userStringLength
 */
static addUserStringLength(builder:flatbuffers.Builder, userStringLength:number) {
  builder.addFieldInt32(9, userStringLength, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset userStringOffset
 */
static addUserString(builder:flatbuffers.Builder, userStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, userStringOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endUserDataItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createUserDataItem(builder:flatbuffers.Builder, flags:ss.ssfb.UserDataFlag, arrayIndex:number, integer:number, rectX:number, rectY:number, rectW:number, rectH:number, pointX:number, pointY:number, userStringLength:number, userStringOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserDataItem.startUserDataItem(builder);
  UserDataItem.addFlags(builder, flags);
  UserDataItem.addArrayIndex(builder, arrayIndex);
  UserDataItem.addInteger(builder, integer);
  UserDataItem.addRectX(builder, rectX);
  UserDataItem.addRectY(builder, rectY);
  UserDataItem.addRectW(builder, rectW);
  UserDataItem.addRectH(builder, rectH);
  UserDataItem.addPointX(builder, pointX);
  UserDataItem.addPointY(builder, pointY);
  UserDataItem.addUserStringLength(builder, userStringLength);
  UserDataItem.addUserString(builder, userStringOffset);
  return UserDataItem.endUserDataItem(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class UserDataPerFrame {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns UserDataPerFrame
 */
__init(i:number, bb:flatbuffers.ByteBuffer):UserDataPerFrame {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param UserDataPerFrame= obj
 * @returns UserDataPerFrame
 */
static getRootAsUserDataPerFrame(bb:flatbuffers.ByteBuffer, obj?:UserDataPerFrame):UserDataPerFrame {
  return (obj || new UserDataPerFrame).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
frameIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.UserDataItem= obj
 * @returns ss.ssfb.UserDataItem
 */
data(index: number, obj?:ss.ssfb.UserDataItem):ss.ssfb.UserDataItem|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.UserDataItem).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
dataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startUserDataPerFrame(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frameIndex
 */
static addFrameIndex(builder:flatbuffers.Builder, frameIndex:number) {
  builder.addFieldInt16(0, frameIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endUserDataPerFrame(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createUserDataPerFrame(builder:flatbuffers.Builder, frameIndex:number, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserDataPerFrame.startUserDataPerFrame(builder);
  UserDataPerFrame.addFrameIndex(builder, frameIndex);
  UserDataPerFrame.addData(builder, dataOffset);
  return UserDataPerFrame.endUserDataPerFrame(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class LabelDataItem {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LabelDataItem
 */
__init(i:number, bb:flatbuffers.ByteBuffer):LabelDataItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LabelDataItem= obj
 * @returns LabelDataItem
 */
static getRootAsLabelDataItem(bb:flatbuffers.ByteBuffer, obj?:LabelDataItem):LabelDataItem {
  return (obj || new LabelDataItem).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
frameIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startLabelDataItem(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset labelOffset
 */
static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, labelOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frameIndex
 */
static addFrameIndex(builder:flatbuffers.Builder, frameIndex:number) {
  builder.addFieldInt16(1, frameIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endLabelDataItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createLabelDataItem(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset, frameIndex:number):flatbuffers.Offset {
  LabelDataItem.startLabelDataItem(builder);
  LabelDataItem.addLabel(builder, labelOffset);
  LabelDataItem.addFrameIndex(builder, frameIndex);
  return LabelDataItem.endLabelDataItem(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class AnimationData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AnimationData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):AnimationData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimationData= obj
 * @returns AnimationData
 */
static getRootAsAnimationData(bb:flatbuffers.ByteBuffer, obj?:AnimationData):AnimationData {
  return (obj || new AnimationData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param ss.ssfb.AnimationInitialData= obj
 * @returns ss.ssfb.AnimationInitialData
 */
defaultData(index: number, obj?:ss.ssfb.AnimationInitialData):ss.ssfb.AnimationInitialData|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.AnimationInitialData).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
defaultDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.FrameDataIndex= obj
 * @returns ss.ssfb.FrameDataIndex
 */
frameData(index: number, obj?:ss.ssfb.FrameDataIndex):ss.ssfb.FrameDataIndex|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ss.ssfb.FrameDataIndex).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
frameDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.UserDataPerFrame= obj
 * @returns ss.ssfb.UserDataPerFrame
 */
userData(index: number, obj?:ss.ssfb.UserDataPerFrame):ss.ssfb.UserDataPerFrame|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ss.ssfb.UserDataPerFrame).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
userDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.LabelDataItem= obj
 * @returns ss.ssfb.LabelDataItem
 */
labelData(index: number, obj?:ss.ssfb.LabelDataItem):ss.ssfb.LabelDataItem|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ss.ssfb.LabelDataItem).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
labelDataLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.MeshDataUV= obj
 * @returns ss.ssfb.MeshDataUV
 */
meshsDataUV(index: number, obj?:ss.ssfb.MeshDataUV):ss.ssfb.MeshDataUV|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ss.ssfb.MeshDataUV).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
meshsDataUVLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.MeshDataIndices= obj
 * @returns ss.ssfb.MeshDataIndices
 */
meshsDataIndices(index: number, obj?:ss.ssfb.MeshDataIndices):ss.ssfb.MeshDataIndices|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ss.ssfb.MeshDataIndices).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
meshsDataIndicesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
startFrames():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
endFrames():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
totalFrames():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
fps():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
labelNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
canvasSizeW():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
canvasSizeH():number {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
canvasPvotX():number {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
canvasPvotY():number {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAnimationData(builder:flatbuffers.Builder) {
  builder.startObject(16);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset defaultDataOffset
 */
static addDefaultData(builder:flatbuffers.Builder, defaultDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, defaultDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createDefaultDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDefaultDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset frameDataOffset
 */
static addFrameData(builder:flatbuffers.Builder, frameDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, frameDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createFrameDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startFrameDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset userDataOffset
 */
static addUserData(builder:flatbuffers.Builder, userDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createUserDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startUserDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset labelDataOffset
 */
static addLabelData(builder:flatbuffers.Builder, labelDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, labelDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createLabelDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startLabelDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset meshsDataUVOffset
 */
static addMeshsDataUV(builder:flatbuffers.Builder, meshsDataUVOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, meshsDataUVOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMeshsDataUVVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMeshsDataUVVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset meshsDataIndicesOffset
 */
static addMeshsDataIndices(builder:flatbuffers.Builder, meshsDataIndicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, meshsDataIndicesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMeshsDataIndicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMeshsDataIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number startFrames
 */
static addStartFrames(builder:flatbuffers.Builder, startFrames:number) {
  builder.addFieldInt16(7, startFrames, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number endFrames
 */
static addEndFrames(builder:flatbuffers.Builder, endFrames:number) {
  builder.addFieldInt16(8, endFrames, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number totalFrames
 */
static addTotalFrames(builder:flatbuffers.Builder, totalFrames:number) {
  builder.addFieldInt16(9, totalFrames, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number fps
 */
static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt16(10, fps, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number labelNum
 */
static addLabelNum(builder:flatbuffers.Builder, labelNum:number) {
  builder.addFieldInt16(11, labelNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasSizeW
 */
static addCanvasSizeW(builder:flatbuffers.Builder, canvasSizeW:number) {
  builder.addFieldInt16(12, canvasSizeW, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasSizeH
 */
static addCanvasSizeH(builder:flatbuffers.Builder, canvasSizeH:number) {
  builder.addFieldInt16(13, canvasSizeH, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasPvotX
 */
static addCanvasPvotX(builder:flatbuffers.Builder, canvasPvotX:number) {
  builder.addFieldFloat32(14, canvasPvotX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number canvasPvotY
 */
static addCanvasPvotY(builder:flatbuffers.Builder, canvasPvotY:number) {
  builder.addFieldFloat32(15, canvasPvotY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAnimationData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createAnimationData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, defaultDataOffset:flatbuffers.Offset, frameDataOffset:flatbuffers.Offset, userDataOffset:flatbuffers.Offset, labelDataOffset:flatbuffers.Offset, meshsDataUVOffset:flatbuffers.Offset, meshsDataIndicesOffset:flatbuffers.Offset, startFrames:number, endFrames:number, totalFrames:number, fps:number, labelNum:number, canvasSizeW:number, canvasSizeH:number, canvasPvotX:number, canvasPvotY:number):flatbuffers.Offset {
  AnimationData.startAnimationData(builder);
  AnimationData.addName(builder, nameOffset);
  AnimationData.addDefaultData(builder, defaultDataOffset);
  AnimationData.addFrameData(builder, frameDataOffset);
  AnimationData.addUserData(builder, userDataOffset);
  AnimationData.addLabelData(builder, labelDataOffset);
  AnimationData.addMeshsDataUV(builder, meshsDataUVOffset);
  AnimationData.addMeshsDataIndices(builder, meshsDataIndicesOffset);
  AnimationData.addStartFrames(builder, startFrames);
  AnimationData.addEndFrames(builder, endFrames);
  AnimationData.addTotalFrames(builder, totalFrames);
  AnimationData.addFps(builder, fps);
  AnimationData.addLabelNum(builder, labelNum);
  AnimationData.addCanvasSizeW(builder, canvasSizeW);
  AnimationData.addCanvasSizeH(builder, canvasSizeH);
  AnimationData.addCanvasPvotX(builder, canvasPvotX);
  AnimationData.addCanvasPvotY(builder, canvasPvotY);
  return AnimationData.endAnimationData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class AnimationInitialData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AnimationInitialData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):AnimationInitialData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimationInitialData= obj
 * @returns AnimationInitialData
 */
static getRootAsAnimationInitialData(bb:flatbuffers.ByteBuffer, obj?:AnimationInitialData):AnimationInitialData {
  return (obj || new AnimationInitialData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
lowflag():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
highflag():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
priority():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
cellIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
opacity():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
localOpacity():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
masklimen():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
positionX():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
positionY():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
positionZ():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pivotX():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
pivotY():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationX():number {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationY():number {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
rotationZ():number {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
scaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
scaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
localScaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
localScaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeX():number {
  var offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
sizeY():number {
  var offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvMoveX():number {
  var offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvMoveY():number {
  var offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvRotation():number {
  var offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvScaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
uvScaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
boundingRadius():number {
  var offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
instanceValueCurKeyframe():number {
  var offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueStartFrame():number {
  var offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueEndFrame():number {
  var offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueLoopNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
instanceValueSpeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
instanceValueLoopFlag():number {
  var offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
effectValueCurKeyframe():number {
  var offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
effectValueStartTime():number {
  var offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
effectValueSpeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
effectValueLoopFlag():number {
  var offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAnimationInitialData(builder:flatbuffers.Builder) {
  builder.startObject(38);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number lowflag
 */
static addLowflag(builder:flatbuffers.Builder, lowflag:number) {
  builder.addFieldInt32(1, lowflag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number highflag
 */
static addHighflag(builder:flatbuffers.Builder, highflag:number) {
  builder.addFieldInt32(2, highflag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number priority
 */
static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt16(3, priority, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number cellIndex
 */
static addCellIndex(builder:flatbuffers.Builder, cellIndex:number) {
  builder.addFieldInt16(4, cellIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number opacity
 */
static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldInt16(5, opacity, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localOpacity
 */
static addLocalOpacity(builder:flatbuffers.Builder, localOpacity:number) {
  builder.addFieldInt16(6, localOpacity, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number masklimen
 */
static addMasklimen(builder:flatbuffers.Builder, masklimen:number) {
  builder.addFieldInt16(7, masklimen, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number positionX
 */
static addPositionX(builder:flatbuffers.Builder, positionX:number) {
  builder.addFieldFloat32(8, positionX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number positionY
 */
static addPositionY(builder:flatbuffers.Builder, positionY:number) {
  builder.addFieldFloat32(9, positionY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number positionZ
 */
static addPositionZ(builder:flatbuffers.Builder, positionZ:number) {
  builder.addFieldFloat32(10, positionZ, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotX
 */
static addPivotX(builder:flatbuffers.Builder, pivotX:number) {
  builder.addFieldFloat32(11, pivotX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pivotY
 */
static addPivotY(builder:flatbuffers.Builder, pivotY:number) {
  builder.addFieldFloat32(12, pivotY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationX
 */
static addRotationX(builder:flatbuffers.Builder, rotationX:number) {
  builder.addFieldFloat32(13, rotationX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationY
 */
static addRotationY(builder:flatbuffers.Builder, rotationY:number) {
  builder.addFieldFloat32(14, rotationY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number rotationZ
 */
static addRotationZ(builder:flatbuffers.Builder, rotationZ:number) {
  builder.addFieldFloat32(15, rotationZ, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleX
 */
static addScaleX(builder:flatbuffers.Builder, scaleX:number) {
  builder.addFieldFloat32(16, scaleX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleY
 */
static addScaleY(builder:flatbuffers.Builder, scaleY:number) {
  builder.addFieldFloat32(17, scaleY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localScaleX
 */
static addLocalScaleX(builder:flatbuffers.Builder, localScaleX:number) {
  builder.addFieldFloat32(18, localScaleX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localScaleY
 */
static addLocalScaleY(builder:flatbuffers.Builder, localScaleY:number) {
  builder.addFieldFloat32(19, localScaleY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeX
 */
static addSizeX(builder:flatbuffers.Builder, sizeX:number) {
  builder.addFieldFloat32(20, sizeX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sizeY
 */
static addSizeY(builder:flatbuffers.Builder, sizeY:number) {
  builder.addFieldFloat32(21, sizeY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvMoveX
 */
static addUvMoveX(builder:flatbuffers.Builder, uvMoveX:number) {
  builder.addFieldFloat32(22, uvMoveX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvMoveY
 */
static addUvMoveY(builder:flatbuffers.Builder, uvMoveY:number) {
  builder.addFieldFloat32(23, uvMoveY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvRotation
 */
static addUvRotation(builder:flatbuffers.Builder, uvRotation:number) {
  builder.addFieldFloat32(24, uvRotation, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvScaleX
 */
static addUvScaleX(builder:flatbuffers.Builder, uvScaleX:number) {
  builder.addFieldFloat32(25, uvScaleX, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number uvScaleY
 */
static addUvScaleY(builder:flatbuffers.Builder, uvScaleY:number) {
  builder.addFieldFloat32(26, uvScaleY, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boundingRadius
 */
static addBoundingRadius(builder:flatbuffers.Builder, boundingRadius:number) {
  builder.addFieldFloat32(27, boundingRadius, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueCurKeyframe
 */
static addInstanceValueCurKeyframe(builder:flatbuffers.Builder, instanceValueCurKeyframe:number) {
  builder.addFieldInt32(28, instanceValueCurKeyframe, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueStartFrame
 */
static addInstanceValueStartFrame(builder:flatbuffers.Builder, instanceValueStartFrame:number) {
  builder.addFieldInt32(29, instanceValueStartFrame, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueEndFrame
 */
static addInstanceValueEndFrame(builder:flatbuffers.Builder, instanceValueEndFrame:number) {
  builder.addFieldInt32(30, instanceValueEndFrame, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueLoopNum
 */
static addInstanceValueLoopNum(builder:flatbuffers.Builder, instanceValueLoopNum:number) {
  builder.addFieldInt32(31, instanceValueLoopNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueSpeed
 */
static addInstanceValueSpeed(builder:flatbuffers.Builder, instanceValueSpeed:number) {
  builder.addFieldFloat32(32, instanceValueSpeed, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number instanceValueLoopFlag
 */
static addInstanceValueLoopFlag(builder:flatbuffers.Builder, instanceValueLoopFlag:number) {
  builder.addFieldInt32(33, instanceValueLoopFlag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueCurKeyframe
 */
static addEffectValueCurKeyframe(builder:flatbuffers.Builder, effectValueCurKeyframe:number) {
  builder.addFieldInt32(34, effectValueCurKeyframe, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueStartTime
 */
static addEffectValueStartTime(builder:flatbuffers.Builder, effectValueStartTime:number) {
  builder.addFieldInt32(35, effectValueStartTime, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueSpeed
 */
static addEffectValueSpeed(builder:flatbuffers.Builder, effectValueSpeed:number) {
  builder.addFieldFloat32(36, effectValueSpeed, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number effectValueLoopFlag
 */
static addEffectValueLoopFlag(builder:flatbuffers.Builder, effectValueLoopFlag:number) {
  builder.addFieldInt32(37, effectValueLoopFlag, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAnimationInitialData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createAnimationInitialData(builder:flatbuffers.Builder, index:number, lowflag:number, highflag:number, priority:number, cellIndex:number, opacity:number, localOpacity:number, masklimen:number, positionX:number, positionY:number, positionZ:number, pivotX:number, pivotY:number, rotationX:number, rotationY:number, rotationZ:number, scaleX:number, scaleY:number, localScaleX:number, localScaleY:number, sizeX:number, sizeY:number, uvMoveX:number, uvMoveY:number, uvRotation:number, uvScaleX:number, uvScaleY:number, boundingRadius:number, instanceValueCurKeyframe:number, instanceValueStartFrame:number, instanceValueEndFrame:number, instanceValueLoopNum:number, instanceValueSpeed:number, instanceValueLoopFlag:number, effectValueCurKeyframe:number, effectValueStartTime:number, effectValueSpeed:number, effectValueLoopFlag:number):flatbuffers.Offset {
  AnimationInitialData.startAnimationInitialData(builder);
  AnimationInitialData.addIndex(builder, index);
  AnimationInitialData.addLowflag(builder, lowflag);
  AnimationInitialData.addHighflag(builder, highflag);
  AnimationInitialData.addPriority(builder, priority);
  AnimationInitialData.addCellIndex(builder, cellIndex);
  AnimationInitialData.addOpacity(builder, opacity);
  AnimationInitialData.addLocalOpacity(builder, localOpacity);
  AnimationInitialData.addMasklimen(builder, masklimen);
  AnimationInitialData.addPositionX(builder, positionX);
  AnimationInitialData.addPositionY(builder, positionY);
  AnimationInitialData.addPositionZ(builder, positionZ);
  AnimationInitialData.addPivotX(builder, pivotX);
  AnimationInitialData.addPivotY(builder, pivotY);
  AnimationInitialData.addRotationX(builder, rotationX);
  AnimationInitialData.addRotationY(builder, rotationY);
  AnimationInitialData.addRotationZ(builder, rotationZ);
  AnimationInitialData.addScaleX(builder, scaleX);
  AnimationInitialData.addScaleY(builder, scaleY);
  AnimationInitialData.addLocalScaleX(builder, localScaleX);
  AnimationInitialData.addLocalScaleY(builder, localScaleY);
  AnimationInitialData.addSizeX(builder, sizeX);
  AnimationInitialData.addSizeY(builder, sizeY);
  AnimationInitialData.addUvMoveX(builder, uvMoveX);
  AnimationInitialData.addUvMoveY(builder, uvMoveY);
  AnimationInitialData.addUvRotation(builder, uvRotation);
  AnimationInitialData.addUvScaleX(builder, uvScaleX);
  AnimationInitialData.addUvScaleY(builder, uvScaleY);
  AnimationInitialData.addBoundingRadius(builder, boundingRadius);
  AnimationInitialData.addInstanceValueCurKeyframe(builder, instanceValueCurKeyframe);
  AnimationInitialData.addInstanceValueStartFrame(builder, instanceValueStartFrame);
  AnimationInitialData.addInstanceValueEndFrame(builder, instanceValueEndFrame);
  AnimationInitialData.addInstanceValueLoopNum(builder, instanceValueLoopNum);
  AnimationInitialData.addInstanceValueSpeed(builder, instanceValueSpeed);
  AnimationInitialData.addInstanceValueLoopFlag(builder, instanceValueLoopFlag);
  AnimationInitialData.addEffectValueCurKeyframe(builder, effectValueCurKeyframe);
  AnimationInitialData.addEffectValueStartTime(builder, effectValueStartTime);
  AnimationInitialData.addEffectValueSpeed(builder, effectValueSpeed);
  AnimationInitialData.addEffectValueLoopFlag(builder, effectValueLoopFlag);
  return AnimationInitialData.endAnimationInitialData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class PartData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PartData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PartData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartData= obj
 * @returns PartData
 */
static getRootAsPartData(bb:flatbuffers.ByteBuffer, obj?:PartData):PartData {
  return (obj || new PartData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
index():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
parentIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns ss.ssfb.SsPartType
 */
type():ss.ssfb.SsPartType {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.SsPartType.Nulltype;
};

/**
 * @returns ss.ssfb.BoundsType
 */
boundsType():ss.ssfb.BoundsType {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.BoundsType.none;
};

/**
 * @returns ss.ssfb.BlendType
 */
alphaBlendType():ss.ssfb.BlendType {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : ss.ssfb.BlendType.mix;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
refname():string|null
refname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refname(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
effectfilename():string|null
effectfilename(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
effectfilename(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
colorLabel():string|null
colorLabel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
colorLabel(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns boolean
 */
maskInfluence():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPartData(builder:flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number index
 */
static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(1, index, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number parentIndex
 */
static addParentIndex(builder:flatbuffers.Builder, parentIndex:number) {
  builder.addFieldInt16(2, parentIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.SsPartType type
 */
static addType(builder:flatbuffers.Builder, type:ss.ssfb.SsPartType) {
  builder.addFieldInt8(3, type, ss.ssfb.SsPartType.Nulltype);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.BoundsType boundsType
 */
static addBoundsType(builder:flatbuffers.Builder, boundsType:ss.ssfb.BoundsType) {
  builder.addFieldInt8(4, boundsType, ss.ssfb.BoundsType.none);
};

/**
 * @param flatbuffers.Builder builder
 * @param ss.ssfb.BlendType alphaBlendType
 */
static addAlphaBlendType(builder:flatbuffers.Builder, alphaBlendType:ss.ssfb.BlendType) {
  builder.addFieldInt8(5, alphaBlendType, ss.ssfb.BlendType.mix);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset refnameOffset
 */
static addRefname(builder:flatbuffers.Builder, refnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, refnameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset effectfilenameOffset
 */
static addEffectfilename(builder:flatbuffers.Builder, effectfilenameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, effectfilenameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset colorLabelOffset
 */
static addColorLabel(builder:flatbuffers.Builder, colorLabelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, colorLabelOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean maskInfluence
 */
static addMaskInfluence(builder:flatbuffers.Builder, maskInfluence:boolean) {
  builder.addFieldInt8(9, +maskInfluence, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPartData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPartData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, index:number, parentIndex:number, type:ss.ssfb.SsPartType, boundsType:ss.ssfb.BoundsType, alphaBlendType:ss.ssfb.BlendType, refnameOffset:flatbuffers.Offset, effectfilenameOffset:flatbuffers.Offset, colorLabelOffset:flatbuffers.Offset, maskInfluence:boolean):flatbuffers.Offset {
  PartData.startPartData(builder);
  PartData.addName(builder, nameOffset);
  PartData.addIndex(builder, index);
  PartData.addParentIndex(builder, parentIndex);
  PartData.addType(builder, type);
  PartData.addBoundsType(builder, boundsType);
  PartData.addAlphaBlendType(builder, alphaBlendType);
  PartData.addRefname(builder, refnameOffset);
  PartData.addEffectfilename(builder, effectfilenameOffset);
  PartData.addColorLabel(builder, colorLabelOffset);
  PartData.addMaskInfluence(builder, maskInfluence);
  return PartData.endPartData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class AnimePackData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AnimePackData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):AnimePackData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AnimePackData= obj
 * @returns AnimePackData
 */
static getRootAsAnimePackData(bb:flatbuffers.ByteBuffer, obj?:AnimePackData):AnimePackData {
  return (obj || new AnimePackData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param ss.ssfb.PartData= obj
 * @returns ss.ssfb.PartData
 */
parts(index: number, obj?:ss.ssfb.PartData):ss.ssfb.PartData|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ss.ssfb.PartData).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
partsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.AnimationData= obj
 * @returns ss.ssfb.AnimationData
 */
animations(index: number, obj?:ss.ssfb.AnimationData):ss.ssfb.AnimationData|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ss.ssfb.AnimationData).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
animationsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAnimePackData(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset partsOffset
 */
static addParts(builder:flatbuffers.Builder, partsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, partsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createPartsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPartsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset animationsOffset
 */
static addAnimations(builder:flatbuffers.Builder, animationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, animationsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createAnimationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startAnimationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAnimePackData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createAnimePackData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, partsOffset:flatbuffers.Offset, animationsOffset:flatbuffers.Offset):flatbuffers.Offset {
  AnimePackData.startAnimePackData(builder);
  AnimePackData.addName(builder, nameOffset);
  AnimePackData.addParts(builder, partsOffset);
  AnimePackData.addAnimations(builder, animationsOffset);
  return AnimePackData.endAnimePackData(builder);
}
}
}
/**
 * @constructor
 */
export namespace ss.ssfb{
export class ProjectData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns ProjectData
 */
__init(i:number, bb:flatbuffers.ByteBuffer):ProjectData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ProjectData= obj
 * @returns ProjectData
 */
static getRootAsProjectData(bb:flatbuffers.ByteBuffer, obj?:ProjectData):ProjectData {
  return (obj || new ProjectData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @returns boolean
 */
static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SSFB');
};

/**
 * @returns number
 */
dataId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
version():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
imageBaseDir():string|null
imageBaseDir(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageBaseDir(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param ss.ssfb.Cell= obj
 * @returns ss.ssfb.Cell
 */
cells(index: number, obj?:ss.ssfb.Cell):ss.ssfb.Cell|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ss.ssfb.Cell).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
cellsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.AnimePackData= obj
 * @returns ss.ssfb.AnimePackData
 */
animePacks(index: number, obj?:ss.ssfb.AnimePackData):ss.ssfb.AnimePackData|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ss.ssfb.AnimePackData).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
animePacksLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param ss.ssfb.EffectFile= obj
 * @returns ss.ssfb.EffectFile
 */
effectFileList(index: number, obj?:ss.ssfb.EffectFile):ss.ssfb.EffectFile|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ss.ssfb.EffectFile).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
effectFileListLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numCells():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numAnimePacks():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numEffectFileList():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startProjectData(builder:flatbuffers.Builder) {
  builder.startObject(9);
};

/**
 * @param flatbuffers.Builder builder
 * @param number dataId
 */
static addDataId(builder:flatbuffers.Builder, dataId:number) {
  builder.addFieldInt32(0, dataId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number version
 */
static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset imageBaseDirOffset
 */
static addImageBaseDir(builder:flatbuffers.Builder, imageBaseDirOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, imageBaseDirOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset cellsOffset
 */
static addCells(builder:flatbuffers.Builder, cellsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cellsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createCellsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startCellsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset animePacksOffset
 */
static addAnimePacks(builder:flatbuffers.Builder, animePacksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, animePacksOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createAnimePacksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startAnimePacksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset effectFileListOffset
 */
static addEffectFileList(builder:flatbuffers.Builder, effectFileListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, effectFileListOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createEffectFileListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startEffectFileListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numCells
 */
static addNumCells(builder:flatbuffers.Builder, numCells:number) {
  builder.addFieldInt16(6, numCells, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numAnimePacks
 */
static addNumAnimePacks(builder:flatbuffers.Builder, numAnimePacks:number) {
  builder.addFieldInt16(7, numAnimePacks, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numEffectFileList
 */
static addNumEffectFileList(builder:flatbuffers.Builder, numEffectFileList:number) {
  builder.addFieldInt16(8, numEffectFileList, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endProjectData(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishProjectDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSFB');
};

static createProjectData(builder:flatbuffers.Builder, dataId:number, version:number, imageBaseDirOffset:flatbuffers.Offset, cellsOffset:flatbuffers.Offset, animePacksOffset:flatbuffers.Offset, effectFileListOffset:flatbuffers.Offset, numCells:number, numAnimePacks:number, numEffectFileList:number):flatbuffers.Offset {
  ProjectData.startProjectData(builder);
  ProjectData.addDataId(builder, dataId);
  ProjectData.addVersion(builder, version);
  ProjectData.addImageBaseDir(builder, imageBaseDirOffset);
  ProjectData.addCells(builder, cellsOffset);
  ProjectData.addAnimePacks(builder, animePacksOffset);
  ProjectData.addEffectFileList(builder, effectFileListOffset);
  ProjectData.addNumCells(builder, numCells);
  ProjectData.addNumAnimePacks(builder, numAnimePacks);
  ProjectData.addNumEffectFileList(builder, numEffectFileList);
  return ProjectData.endProjectData(builder);
}
}
}
